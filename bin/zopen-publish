#!/bin/sh
#
# zopen-publish script for publishing zopen community ports to GitHub Releases (using curl and metadata.json)
#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself() {
  ME=$(basename "$0")
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself

printSyntax()
{
  echo "${ME} - Publish zopen package release to GitHub."
  echo ""
  echo "Usage: ${ME} [OPTION] -p PAX_FILE -m METADATA_FILE -g TAG"
  echo ""
  echo "Options:"
  echo "  -h, --help              print this help"
  echo "  -v, --verbose           run in verbose mode."
  echo "  -f, --force             Force overwrite release if tag exists."
  echo "  -p, --pax-file PAX_FILE   Path to the pax.Z file (required)"
  echo "  -m, --metadata-file METADATA_FILE"
  echo "                          Path to the metadata.json file (required)"
  echo "  -g, --tag TAG             Tag name for the release (required)"
  echo "                          e.g., DEV_mypackage_12345"
  echo "  -r, --repo REPO_URL     GitHub repository URL (optional, overrides metadata.json)"
  echo "                          e.g., https://github.com/zopencommunity/xzport.git"
  echo "  -d, --description TEXT  Description for the GitHub release (optional, from metadata.json 'summary' if omitted)"
  echo "  -b, --build-line LINE   Build line (DEV or STABLE) (optional, from metadata.json 'buildline' if omitted)"
  echo "  -t, --github-token TOKEN"
  echo "                          GitHub Personal Access Token (required, or set GITHUB_TOKEN env var)"
  echo "  -o, --github-org ORG     GitHub Organization (default: zopencommunity)"
  echo "  -l, --latest            Mark release as 'Latest' (not pre-release)."
  echo "     --version            print version"
  echo ""
  echo "Environment Variables:"
  echo "  GITHUB_TOKEN            GitHub Personal Access Token (alternative to --github-token)"
  echo ""
  echo "Example:"
  echo "  zopen-publish -f -p install/mypackage.zos.pax.Z -m metadata.json -g DEV_mypackage_12345 -t <your_github_token>"
  echo "  zopen-publish -v -f -p install/mypackage.zos.pax.Z -m metadata.json -r https://github.com/zopencommunity/override-repo.git -d \"My custom release description\" -b DEV -g REL-1.0.1 -t <your_github_token> -l"
}

checkDependencies() {
  if ! command -v curl > /dev/null 2>&1; then
    printError "Error: curl command not found. Please install it."
    return 1
  fi
  if ! command -v jq > /dev/null 2>&1; then
    printError "Error: jq command not found. Please install it."
    return 1
  fi
  return 0
}


processOptions() {
  args=$*
  verbose=false
  MAKE_LATEST_RELEASE=false 
  RELEASE_TAG_OPT="" 
  FORCE_OVERWRITE=false 

  if [ $# -eq 0 ]; then
    printError "No options specified."
    printSyntax
    exit 1
  fi

  while [ $# -gt 0 ]; do
    case "$1" in
      "-h" | "--help")
        printSyntax
        exit 0
        ;;
      "-v" | "--verbose")
        verbose=true
        ;;
      "-f" | "--force")
        FORCE_OVERWRITE=true
        ;;
      "-p" | "--pax-file")
        PAX_FILE="$2"
        shift
        ;;
      "-m" | "--metadata-file")
        METADATA_FILE="$2"
        shift
        ;;
      "-r" | "--repo")
        PORT_GITHUB_REPO_OPT="$2"
        shift
        ;;
      "-d" | "--description")
        PORT_DESCRIPTION_OPT="$2"
        shift
        ;;
      "-b" | "--build-line")
        BUILD_LINE_OPT="$2"
        shift
        ;;
      "-t" | "--github-token")
        GITHUB_TOKEN_OPT="$2"
        shift
        ;;
      "-o" | "--github-org")
        GITHUB_ORGANIZATION="$2"
        shift
        ;;
      "-l" | "--latest")
        MAKE_LATEST_RELEASE=true
        ;;
      "-g" | "--tag")
        RELEASE_TAG_OPT="$2"
        shift
        ;;
      "--version")
        zopen-version "${ME}" 
        exit 0
        ;;
      -*)
        printError "Unknown option '$1'"
        printSyntax
        exit 1
        ;;
      *)
        printError "Unexpected argument '$1'" 
        printSyntax
        exit 1
        ;;
    esac
    shift
  done

  if [ -z "$PAX_FILE" ] || [ -z "$METADATA_FILE" ] || [ -z "$RELEASE_TAG_OPT" ]; then
    printError "Missing required options: -p PAX_FILE, -m METADATA_FILE, and -g TAG are required."
    printSyntax
    exit 1
  fi

  if [ ! -f "$PAX_FILE" ]; then
    printError "PAX file not found: $PAX_FILE"
    exit 1
  fi

  if [ ! -f "$METADATA_FILE" ]; then
    printError "Metadata file not found: $METADATA_FILE"
    exit 1
  fi

  if [ -z "$GITHUB_TOKEN_OPT" ] && [ -z "$GITHUB_TOKEN" ]; then
      printError "GitHub token is required. Please provide it via --github-token option or GITHUB_TOKEN environment variable."
      printSyntax
      exit 1
  fi

  if [ -n "$GITHUB_TOKEN_OPT" ]; then
    export GITHUB_TOKEN="$GITHUB_TOKEN_OPT"
  fi


  if [ -z "$GITHUB_ORGANIZATION" ]; then
    export GITHUB_ORGANIZATION="zopencommunity" # Default organization
  fi

  export FORCE_OVERWRITE 
}

# --- GitHub API Functions ---

createGitHubRelease() {
  tag="$1"
  name="$2"
  description="$3"
  make_latest_release="$4"

  printVerbose "Attempting to create release with tag: $tag, name: $name, latest: ${make_latest_release}" 
  printVerbose "Creating GitHub release tag: $tag, name: $name, latest: ${make_latest_release}" 

  api_url="https://api.github.com/repos/${GITHUB_ORGANIZATION}/${GITHUB_REPO}/releases"
  prerelease_value="true" 
  if [ "${make_latest_release}" = "true" ]; then
    prerelease_value="false" 
  fi

  payload=$(printf '{"tag_name": "%s", "name": "%s", "body": "%s", "prerelease": %s}' "$tag" "$name" "$description" "$prerelease_value")

  ERROR_OUTPUT=$(curl -s -X POST \
    -H "Authorization: token ${GITHUB_TOKEN}" \
    -H "Content-Type: application/json" \
    -d "${payload}" \
    "${api_url}" 2>&1)
  curl_status=$?
  error_message=$(echo "$ERROR_OUTPUT")


  RELEASE_RESPONSE=$(echo "$ERROR_OUTPUT") 
  release_id=$(echo "$RELEASE_RESPONSE" | jq -r '.id')
  api_error_message=$(echo "$RELEASE_RESPONSE" | jq -r '.message')


  if [ $curl_status -ne 0 ]; then 
    printError "Error executing curl command for creating release tag: $tag"
    if [ -n "$error_message" ]; then 
      printError "curl error: $error_message"
    fi
    return 1
  fi


  if [ -z "$release_id" ] || [[ "$release_id" == "null" ]]; then
    printError "Error creating GitHub release tag: $tag.\n$error_message"
    if [ -n "$api_error_message" ] && [[ "$api_error_message" != "null" ]]; then
      printError "GitHub API Error: $api_error_message"
    fi
    printError "Full GitHub API response (for debugging):" 
    printError "$RELEASE_RESPONSE"
    return 1
  fi

  printVerbose "GitHub release created successfully. Release ID: $release_id, Latest: ${make_latest_release}"
  echo "$release_id" 
  return 0
}

uploadGitHubReleaseAsset() {
  release_id="$1"
  asset_file="$2"
  asset_name=$(basename "$asset_file")

  printVerbose "Uploading asset: $asset_file to release ID: $release_id"

  upload_url=$(printf "https://uploads.github.com/repos/%s/%s/releases/%s/assets?name=%s" "${GITHUB_ORGANIZATION}" "${GITHUB_REPO}" "$release_id" "$asset_name")

  content_length=$(wc -c < "$asset_file") # Calculate Content-Length

  printVerbose "Content-Length: ${content_length}" # Log Content-Length

  ERROR_OUTPUT=$(curl -s --progress-bar -X POST \
    -H "Authorization: token ${GITHUB_TOKEN}" \
    -H "Content-Type: application/octet-stream" \
    -H "Content-Length: ${content_length}" \
    --data-binary "@${asset_file}" \
    "$upload_url" 2>/dev/null ) 
  curl_status=$?
  error_message=$(echo "$ERROR_OUTPUT")

  ASSET_UPLOAD_RESPONSE=$(echo "$ERROR_OUTPUT" | sed 's/^ *//' | sed 's/ *$//') # Trim leading/trailing whitespace
  asset_state=$(echo "$ASSET_UPLOAD_RESPONSE" | jq -r '.state' 2>/dev/null) # Parse state, redirect jq errors to /dev/null

  if [ $? -ne 0 ]; then 
    printError "Error parsing JSON response from GitHub API (jq failed)."
    printError "Full curl output (for debugging jq parsing):"
    printError "$ERROR_OUTPUT" 
    return 1 
  fi

  if [ -z "$asset_state" ] || [[ "$asset_state" == "null" ]] || [ "$asset_state" != "uploaded" ]; then
    printError "Error uploading asset: $asset_file to release ID: $release_id"
    if [ -n "$api_error_message" ] && [[ "$api_error_message" != "null" ]]; then
      printError "GitHub API Error: $api_error_message"
    fi
    printError "Full GitHub API response (for debugging):" # Print full response for debugging
    printError "$ASSET_UPLOAD_RESPONSE" # Now this will be trimmed.
    return 1
  fi

  printVerbose "Asset: $asset_file uploaded successfully to release ID: $release_id"
  return 0
}

deleteGitHubReleaseByTag() {
  tag="$1"

  printVerbose "Checking for existing release tag: $tag"
  release_api_url="https://api.github.com/repos/${GITHUB_ORGANIZATION}/${GITHUB_REPO}/releases/tags/${tag}"

  ERROR_OUTPUT=$(curl -s -X GET \
    -H "Authorization: token ${GITHUB_TOKEN}" \
    "$release_api_url" 2>&1 > /dev/null)
  curl_status=$?
  error_message=$(echo "$ERROR_OUTPUT")

  RELEASE_INFO_RESPONSE=$(echo "$ERROR_OUTPUT") # Now RESPONSE holds both errors and potential JSON response
  release_id=$(echo "$RELEASE_INFO_RESPONSE" | jq -r '.id')
  api_error_message=$(echo "$RELEASE_INFO_RESPONSE" | jq -r '.message')


  if [ $curl_status -ne 0 ]; then # Curl command failed
    printError "Error executing curl command for checking release tag: $tag"
    if [ -n "$error_message" ]; then # Print curl's error message if captured
      printError "curl error: $error_message"
    fi
    return 1
  fi


  if [ -z "$release_id" ] || [[ "$release_id" == "null" ]]; then
    printVerbose "No existing release found for tag: $tag. Skipping deletion."
    return 0 # No release to delete - consider it success.
  fi

  printVerbose "Found existing release ID: $release_id for tag: $tag." 

  printVerbose "Attempting to delete existing release with tag: $tag, ID: $release_id..." 
  delete_api_url="https://api.github.com/repos/${GITHUB_ORGANIZATION}/${GITHUB_REPO}/releases/${release_id}"

  # Capture stderr output to error_message variable - sh compatible way
  ERROR_OUTPUT=$(curl -s -X DELETE \
    -H "Authorization: token ${GITHUB_TOKEN}" \
    "$delete_api_url" 2>&1 > /dev/null)
  curl_status=$?
  error_message=$(echo "$ERROR_OUTPUT")

  DELETE_RESPONSE=$(echo "$ERROR_OUTPUT") 
  delete_api_error_message=$(echo "$DELETE_RESPONSE" | jq -r '.message')


  if [ $curl_status -ne 0 ]; then
    printError "Error executing curl command for deleting release ID: $release_id for tag: $tag"
    if [ -n "$error_message" ]; then 
      printError "curl error: $error_message"
    fi
    return 1
  fi


  if [ -n "$delete_api_error_message" ] && [[ "$delete_api_error_message" != "null" ]]; then
    printError "Error deleting GitHub release ID: $release_id for tag: $tag. GitHub API Error: $delete_api_error_message. Full GitHub API response (for debugging): $DELETE_RESPONSE"
    return 1
  fi

  printVerbose "GitHub release ID: $release_id for tag: $tag deleted successfully." 
  return 0
}


publishRelease() {
  PAX_BASENAME=$(basename "${PAX_FILE}")
  VERSION=$(jq -r '.product.version' "$METADATA_FILE")
  BUILD_ID=$SECONDS # Using seconds since epoch as a simple build ID for standalone script

  # Extract repo URL from metadata.json
  METADATA_REPO_URL=$(jq -r '.product.repo' "$METADATA_FILE")
  if [ -z "$METADATA_REPO_URL" ]; then
    printError "Error: Repository URL ('repo') not found in metadata.json."
    return 1
  fi

  # Use command-line repo option if provided, otherwise use from metadata
  if [ -n "$PORT_GITHUB_REPO_OPT" ]; then
    PORT_GITHUB_REPO="$PORT_GITHUB_REPO_OPT"
    printVerbose "Using repository URL from command line option: $PORT_GITHUB_REPO"
  else
    PORT_GITHUB_REPO="$METADATA_REPO_URL"
    printVerbose "Using repository URL from metadata.json: $PORT_GITHUB_REPO"
  fi

  RELEASE_PREFIX=$(basename "${PORT_GITHUB_REPO}")
  RELEASE_PREFIX=${RELEASE_PREFIX%%.*}
  PORT_NAME=${RELEASE_PREFIX%%port}
  GITHUB_REPO=$RELEASE_PREFIX

  # Extract description from metadata if not provided by option
  if [ -z "$PORT_DESCRIPTION_OPT" ]; then
    PORT_DESCRIPTION=$(jq -r '.product.summary' "$METADATA_FILE")
    if [ -z "$PORT_DESCRIPTION" ]; then
      printError "Error: Description ('summary') not found in metadata.json and not provided via command line."
      return 1
    fi
    printVerbose "Using description from metadata.json: $PORT_DESCRIPTION"
  else
    PORT_DESCRIPTION="$PORT_DESCRIPTION_OPT"
    printVerbose "Using description from command line option: $PORT_DESCRIPTION"
  fi

  # Extract build line from metadata if not provided by option
  if [ -z "$BUILD_LINE_OPT" ]; then
    BUILD_LINE=$(jq -r '.product.buildline' "$METADATA_FILE")
    BUILD_LINE_UPPER=$(echo "$BUILD_LINE" | tr '[:lower:]' '[:upper:]')
    if [[ "$BUILD_LINE_UPPER" != "DEV" && "$BUILD_LINE_UPPER" != "STABLE" ]]; then
      printError "Error: Invalid build line in metadata.json: $BUILD_LINE. Must be 'DEV' or 'STABLE'."
      return 1
    fi
    BUILD_LINE="$BUILD_LINE_UPPER"
    printVerbose "Using build line from metadata.json: $BUILD_LINE"

  else
    BUILD_LINE="$BUILD_LINE_OPT"
    BUILD_LINE_UPPER=$(echo "$BUILD_LINE" | tr '[:lower:]' '[:upper:]')
    if [[ "$BUILD_LINE_UPPER" != "DEV" && "$BUILD_LINE_UPPER" != "STABLE" ]]; then
      printError "Invalid build line: $BUILD_LINE. Must be 'DEV' or 'STABLE'."
      printSyntax
      return 1
    fi
    BUILD_LINE="$BUILD_LINE_UPPER"
    printVerbose "Using build line from command line option: $BUILD_LINE"
  fi


  TAG="${RELEASE_TAG_OPT}"
  NAME="${PORT_NAME} ${VERSION} (${TAG}) - ($BUILD_LINE)" # Modified Name to reflect Tag

  DESCRIPTION="${PORT_DESCRIPTION}<br />"
  DESCRIPTION="${DESCRIPTION}<b>Version:</b> ${VERSION}<br />"
  URL_LINE="https://github.com/${GITHUB_ORGANIZATION}/${GITHUB_REPO}/releases/download/${TAG}/${PAX_BASENAME}"
  DESCRIPTION="${DESCRIPTION}<br /><b>Command to download and install on z/OS (if you have curl)</b> <pre>curl -o ${PAX_BASENAME} -L ${URL_LINE} && pax -rf ${PAX_BASENAME} && cd ${PORT_NAME} && . ./.env</pre>"
  DESCRIPTION="${DESCRIPTION}<br /><b>Or use:</b> <pre>zopen install ${PORT_NAME}</pre>"

  if ${FORCE_OVERWRITE} || ! deleteGitHubReleaseByTag "${TAG}"; then 
      if ! ${FORCE_OVERWRITE} && [ $? -ne 0 ]; then 
        printError "Error: Deleting existing release tag '${TAG}' failed, and force overwrite was not requested. Aborting."
        return 1 
      elif ${FORCE_OVERWRITE}; then
        printWarning "Warning: Deleting existing release tag '${TAG}' may have failed, but force overwrite is enabled. Proceeding with release creation."
      fi
  else
      printVerbose "Existing release tag '${TAG}' deleted successfully (or no existing release found)." # Deletion was successful or no release found when not forcing.
  fi


  RELEASE_ID=$(createGitHubRelease "${TAG}" "${NAME}" "${DESCRIPTION}" "${MAKE_LATEST_RELEASE}") 

  if [ $? -ne 0 ]; then
      return 1 
  fi

  # Upload PAX artifact
  if ! uploadGitHubReleaseAsset "${RELEASE_ID}" "${PAX_FILE}"; then
      return 1 # PAX upload failed
  fi

  # Upload metadata.json artifact
  if ! uploadGitHubReleaseAsset "${RELEASE_ID}" "${METADATA_FILE}"; then
      return 1 # metadata.json upload failed
  fi


  echo "Release published successfully to https://github.com/${GITHUB_ORGANIZATION}/${GITHUB_REPO}/releases/tag/${TAG}"
  return 0
}


# --- Main Script ---

# Initialize variables
GITHUB_ORGANIZATION="zopencommunity" 
PAX_FILE=""
METADATA_FILE=""
PORT_GITHUB_REPO="" 
PORT_GITHUB_REPO_OPT="" 
PORT_DESCRIPTION="" 
PORT_DESCRIPTION_OPT="" 
BUILD_LINE="" 
BUILD_LINE_OPT="" 
GITHUB_TOKEN_OPT=""
MAKE_LATEST_RELEASE=false 
RELEASE_TAG_OPT="" 
FORCE_OVERWRITE=false 

verbose=false # Initialize verbose flag

processOptions "$@"

if checkDependencies; then
  printVerbose "Dependencies check passed."
else
  printError "Some dependencies are missing. Please install them and try again."
  exit 1
fi


if publishRelease; then
  echo "zopen-publish completed successfully."
  exit 0
else
  printError "zopen-publish failed."
  exit 1
fi
