#!/bin/sh
#
# Removal utility for zopen community - https://github.com/zopencommunity
#

#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  # shellcheck disable=SC1091
  . "${INCDIR}/common.sh"
}
setupMyself
checkWritable

printHelp()
{
  cat << HELPDOC
${ME} is a utility for zopen community to remove an installed package or
packages.

Usage: ${ME} [OPTION] [PACKAGE] ...

Options:
  -h, --help, -?    display this help and exit.
  -p, --purge       remove package, the versioned directory, and any
                    cached files.
  -v, --verbose     run in verbose mode.
  --version         print version.
  -y, --yes         automatically answer yes to prompts.

Examples:
  zopen remove foo bar
                    interactively remove the foo and bar packages if installed
  zopen remove --yes foo bar
                    remove the foo and bar packages if installed, without
                    asking for confirmation

Report bugs at https://github.com/zopencommunity/meta/issues .

HELPDOC
}

removePackages()
{
  pkglist=$*
  processActionScripts "transactionpre"
  # Create a temp file name to trigger the post-transaction action script
  # triggering - run only if an action was taken (which creates the file)
  runpostTxnActionScripts=$(mktempfile "txnpost" "run")
  addCleanupTrapCmd "rm -rf ${runpostTxnActionScripts}"
  echo "${pkglist}" | xargs | tr ' ' '\n' | sort | while read pkg; do
    printHeader "Removing package: ${pkg}"
    processActionScripts "removepre"
    printInfo "- Querying install status of package '${pkg}'"
    if [ ! -f "${ZOPEN_PKGINSTALL}/${pkg}/${pkg}/.active" ]; then
      printInfo "${NC}${YELLOW}Package '${pkg}' is not installed${NC}"
    else
      printInfo "- Away to remove '${pkg}',"
      if ! ${yesToPrompts}; then
        while true; do
          printInfo "- Do you want to continue? [y/n/a]"
          read continueInstall < /dev/tty
          case "${continueInstall}" in
            "y") break;;
            "n") mutexFree "zopen"; printInfo "Exiting..."; exit 0 ;;
            "a") yesToPrompts=true; break;;
            *) echo "?";;
          esac
        done
      fi
      printInfo "- Unmeshing from system"
      version="unknown"
      if [ -e "${ZOPEN_PKGINSTALL}/${pkg}/${pkg}/.releaseinfo" ]; then
        version=$(cat "${ZOPEN_PKGINSTALL}/${pkg}/${pkg}/.releaseinfo")
      fi

      if [ -e "${ZOPEN_PKGINSTALL}/${pkg}/${pkg}" ]; then
        deref=$(cd "${ZOPEN_PKGINSTALL}/${pkg}/${pkg}" && pwd -P | awk -F/ '{ print $(NF)}')
        installedlinksfile="${ZOPEN_PKGINSTALL}/${pkg}/${deref}/.links"
        if ${purge}; then
          printInfo "- Purging package"
          printVerbose "Checking if we are currently in a directory that is to be purged"
          [ "${PWD##"${ZOPEN_PKGINSTALL}"/"${pkg}"/"${pkg}"}" != "${PWD}" ] && cd "${ZOPEN_PKGINSTALL}"
          rm -rf "$(cd "${ZOPEN_PKGINSTALL}/${pkg}/${pkg}" && pwd -P)"
          syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_PACKAGE},${CAT_REMOVE}" "REMOVE" "removePackage" "Purging package:'${needle};version:${version};"
          registerRemove "${pkg}" "${version}"
        else
          printVerbose "- Removing metadata file to mark uninstall"
          rm -f "${ZOPEN_PKGINSTALL}/${pkg}/${pkg}/.active"
          printVerbose "- Breaking link from current to versioned"
          rm -f "${ZOPEN_PKGINSTALL}/${pkg}/${pkg}"
        fi
        printVerbose "Main symlink removed, removing dangling symlinks"
        unsymlinkFromSystem "${pkg}" "${ZOPEN_ROOTFS}" "${installedlinksfile}"
      fi

      printVerbose "- Removing profiled entry"
      [ -d "${ZOPEN_ROOTFS}/etc/profiled/${pkg}" ] && rm -rf "${ZOPEN_ROOTFS}/etc/profiled/${pkg}"

      removeFromInstallTracker "${pkg}"
      processActionScripts "removepost"
      syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_PACKAGE},${CAT_REMOVE}" "REMOVE" "removePackage" "Removed package:'${needle};version:${version};"
      touch "${runpostTxnActionScripts}"
      printInfo "${NC}${GREEN}Successfully removed: ${pkg}${NC}"
    fi
  done
  if [ -e "${runpostTxnActionScripts}" ]; then 
    processActionScripts "transactionpost"; 
    rm "${runpostTxnActionScripts}"  
  fi
}

# Main code start here
args=$*

verbose=false
debug=false
purge=false
chosenRepos=""
yesToPrompts=false
while [ $# -gt 0 ]; do
  case "$1" in
  "-p" | "--purge")
    purge=true
    ;;
  "-h" | "--help" | "-?")
    printHelp "${args}"
    exit 0
    ;;
  "--version")
    zopen-version ${ME}
    exit 0
    ;;
  "-v" | "--v" | "-verbose" | "--verbose")
    # shellcheck disable=SC2034
    verbose=true
    ;;
  "--debug")
    # shellcheck disable=SC2034
    debug=true
    ;;
  "-y" | "--yes")
    yesToPrompts=true
    ;;
  *)
    chosenRepos="${chosenRepos} $1"
    ;;
  esac
  shift
done

[ -n "${chosenRepos}" ] || printError "No packages selected for removal"
mutexReq "zopen" "zopen"
removePackages "${chosenRepos}"
mutexFree "zopen"
