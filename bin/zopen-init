#!/bin/sh
# Initialize zopen environment - https://github.com/zopencommunity
#
ME=$(basename "$0")

if [ -z "${utildir}" ]; then
  # shellcheck disable=SC2155
  export utildir="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"
fi

# shellcheck disable=SC2034
ZOPEN_DONT_PROCESS_CONFIG=1
#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename "$0")
  MYDIR="$( cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P )"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  # shellcheck source=/dev/null
  . "${INCDIR}/common.sh"
}
setupMyself
checkWritable

printHelp(){
cat << HELPDOC
zopen init is a utility for zopen community to generate a zopen
environment, bootstrapping initial tools and creating a configuration
file

Usage: zopen init [OPTION] [PARAMETERS]...

Options:
  --append-to-profile
          appends sourcing of zopen-config to current
          user's .profile

  --[no]enable-stats
          Toggle enabling collection of usage statistics

  --[no]override-zos-tools
          Toggle default mode for overriding z/OS /bin tools
          in the zopen-config. Default is --nooverride-zos-tools

  --bypass-prereq-checks
          Bypasses pre-requisite checks

  -h, -?, --help
          display this help and exit

  --re-init
          Re-initializes a previous zopen environment or
          create a new environment using current tooling.
          Re-initializing over a previous installation will
          re-use existing package structures and
          configuration and regenerate configuration files.
          select the active version for PACKAGE from a list

  --refresh
          Refreshes the zopen-config file

  --releaseline-dev
          globally configure the release line for package
          installs to enable Development (DEV) packages; the
          default is for a system to use STABLE packages

  -v, --verbose
          run in verbose mode

  -y, --yes
          automatically answer 'yes' to prompts

Examples:
  zopen init
          interactively bootstrap a zopen environment

  zopen init --releaseline-dev
          interactively bootstrap a zopen environment that will use 
          Development Releaseline packages
  zopen init --yes --append-to-profile /zopen
          non-interactively create a zopen environment at location 
          '/zopen' on disk, with packages installed to 
          '/usr/local/zopen'. The user's .profile will be updated to 
          source the configuration file at '/zopen/etc/zopen-config' 
          when new terminal sessions start

Report bugs at https://github.com/zopencommunity/meta/issues

HELPDOC
}


# Constants
# Number of rm processes to run in parallel
rm_fileprocs=5 #TODO: adjust based on number of online cpus on system

# Boostrap pax files
CURL_PAX="curl-8.10.1.20241001_214340.zos.pax.Z"
JQ_PAX="jq-1.6.20241001_204116.zos.pax.Z"
GPG_PAX="gnupg-2.4.4.20241001_233258.zos.pax.Z"
PINENTRY_PAX="pinentry-1.2.1.20241002_001628.zos.pax.Z"
PKG_DIR="packages"
CURL_PAX_LOCATION="${PKG_DIR}/${CURL_PAX}"
JQ_PAX_LOCATION="${PKG_DIR}/${JQ_PAX}"
GPG_PAX_LOCATION="${PKG_DIR}/${GPG_PAX}"
PINENTRY_PAX_LOCATION="${PKG_DIR}/${JQ_PAX}"

verbose=false
isHostIBM=false
debug=false
yesToPrompts=false
reinitExisting=false
appendToProfile=false
releaselineDev=false
refresh=false
isCollectingStats=false
isBot=false # used by jenkins, CI/CD
bypassPrereqs=false
while [ $# -gt 0 ]; do
  case "$1" in
    "--re-init" )
      reinitExisting=true
      ;;
    "--bypass-prereq-checks")
      bypassPrereqs=true 
      ;;
    "--refresh" )
      refresh=true
      yesToPrompts=true # updating zopen-config is not as scary
      ;;
    "--append-to-profile" )
      appendToProfile=true
      ;;
    "--releaseline-dev" )
      releaselineDev=true
      ;;
    "--enable-stats" )
      enableStats=true
      ;;
    "--override-zos-tools" )
      OVERRIDE_ZOS_TOOLS=true
      ;;
    "--nooverride-zos-tools" )
      OVERRIDE_ZOS_TOOLS=false
      ;;
    "--noenable-stats" )
      enableStats=false
      ;;
    "-h" | "--help" | "-?")
      printHelp
      exit 0
      ;;
    "-v" | "--verbose")
      # shellcheck disable=SC2034
      verbose=true
      ;;
    "--version")
      zopen-version $ME
      exit 0
      ;;
    "--debug")
      # shellcheck disable=SC2034
      debug=true
      ;;
    "--yes" | "-y")
      yesToPrompts=true  # Automatically answer 'yes' to any questions
      ;;
    --*| -*)
      printError "Unsupported argument '$1'"
      ;;
    *)
      rootfs="$1";
      ;;
  esac
  shift
done
# Wrapper around jq to provide extra help for certain scenarios
jqw()
{
  if ! type jq >/dev/null 2>&1; then
    printSoftError "Cannot locate 'jq'."
    printSoftError "If recovering a system, run . ./.env from the following location:"
    printError "  <zopenroot>/usr/local/zopen/jq/<jq-version>  and retry command"
  fi
  jq "$@"
}

determineRootFileSystem()
{
  if [ -n "${ZOPEN_ROOT_PATH}" ]; then
    rootfs="${ZOPEN_ROOT_PATH}"
    printVerbose "- Setting root directory from ZOPEN_ROOT_PATH envvar: ${rootfs}"
  fi

  if [ -z "${rootfs}" ]; then
    if ${reinitExisting} || ${refresh} && [ -n "${ZOPEN_ROOTFS}" ]; then
      rootfs="${ZOPEN_ROOTFS}"
      printVerbose "- Setting root directory from ZOPEN_ROOTFS envvar: ${rootfs}"
    else
      printInfo "- Enter fully-qualified path to your zopen root directory (default: ${HOME}/zopen):"
      rootfs=$(getInput)
    fi
  else
    printVerbose "- Setting root directory from cli: ${rootfs}"
  fi

  if [ -z "${rootfs}" ]; then
    printVerbose "- No explicit root set, using default: ${HOME}/zopen"
    rootfs="${HOME}/zopen"
  else
    if [ "${rootfs%/}" = '/' ]; then
      printInfo "- Stripping trailing '/' char"
      rootfs="${rootfs%})"
    fi
    if [ "${rootfs}" = "/" ]; then
      printInfo "- Installing into system root; are you sure (y/N)?"
      sysrootok=$(getInput)
      if [ -n "${sysrootok}" ] && [ "y" = "${sysrootok}" ]; then
        printInfo "- Using '/' as root filesystem"
        rootfs="/." # references below take a root directory
      else
        printWarning "- Stopping. Existing configuration will be preserved"
        exit 4
      fi
    fi
  fi
}

determineStatsCollection()
{
  isAnalyticsOn
  analyticsRC=$?
  if isIBMHostname; then
    isHostIBM=true
  fi
  if [ -n "$enableStats" ] && $enableStats; then
    isCollectingStats=true
  elif [ -n "$enableStats" ] && ! $enableStats; then
    isCollectingStats=false
  elif [ $analyticsRC -lt 2 ]; then
    if ! isCollectingStats=$(jqw -re '.is_collecting_stats' "${jsonConfig}"); then
      return 4
    fi
    return
  elif $isHostIBM; then
    printAttention "Attention: Turning on usage statistics as your host is an IBM host. If this is incorrect, rerun with --noenable-stats"
    isCollectingStats=true
  elif [ -n "${ZOPEN_IS_BOT}" ]; then
    printAttention "Attention: Turning on usage statistics as you are a CI/CD bot. If this is incorrect, rerun with --noenable-stats"
    isCollectingStats=true
  elif [ ! -t 1 ]; then
    printAttention "Attention: Turning off usage statistics as you are running zopen init in a non-interactive environment. If this is incorrect, rerun with --enable-stats"
    isCollectingStats=false
  else
    statsMsg="Do you want to contribute ${NC}${BOLD}anonymous${NC} usage statistics (https://zopencommunity.github.io/meta/#/Guides/Analytics) to help improve zopen community?"
    if promptYesOrNo "${statsMsg}" false; then
      isCollectingStats=true
    fi
  fi

  if $isCollectingStats; then
    if ! /bin/ping -c 1 -t 2 "${ZOPEN_STATS_IP}" >/dev/null 2>/dev/null; then
      printAttention "The statistics server url is blocked: ${ZOPEN_STATS_URL}. Turning usage statistics off."
      isCollectingStats=false
    fi
  fi

  # Undocumented envar, for CI/CD tracking
  if [ -n "${ZOPEN_IS_BOT}" ]; then
    isBot=true
  fi
}

init()
{
  if ${reinitExisting}; then
    printHeader "Re-initializing zopen framework"
  elif ${refresh}; then
    printHeader "Refreshing zopen framework"
  else
    printHeader "Initializing zopen framework"
  fi

  determineRootFileSystem
  determineStatsCollection

  if ! ${refresh} && ! ${reinitExisting}; then
    printInfo "- Binaries will be symlinked under \"${rootfs}/usr/local/bin\". Libraries will be symlinked under \"${rootfs}/usr/lib\""
    printInfo "- Packages will be installed and maintained under the directory '${rootfs}/${zopen_pkginstall}'."
    printInfo "- Collecting usage statistics: ${isCollectingStats}"
  fi

  if ! promptYesOrNo "Do you want to continue?" ${yesToPrompts}; then
    printInfo "Exiting..."
    exit 0
  fi

  if ! ${yesToPrompts} && [ -z "${OVERRIDE_ZOS_TOOLS}" ]; then
    if promptYesOrNo "Should zopen tools default to overriding the z/OS /bin tools (e.g. man, find, grep)?" ${yesToPrompts}; then
      OVERRIDE_ZOS_TOOLS=true
    fi
  fi

  configFile="${rootfs}/etc/zopen-config"
  if [ -f "${configFile}" ]; then
    if [ -e "${configFile}" ]; then
      if ! ${reinitExisting}; then
        if ${yesToPrompts}; then
          reinit=y
        else
          printWarning "- Existing configuration file found; re-initializing might lose access to previously installed packages. Continue (y/n)?"
          reinit=$(getInput)
        fi
      fi
      if ${reinitExisting} || {
        [ -n "${reinit}" ] && [ "y" = "${reinit}" ]
      }; then
        printInfo "- Re-initializing; zopen-config will be re-created"
        if ! rm -rf "${configFile}"; then
          printError "Unable to remove existing file. Check permissions and retry command."
        fi

      else
        printWarning "- Stopping. Pre-existing configuration will be preserved"
        exit 8
      fi
    fi
  fi

  export ZOPEN_ROOTFS="${rootfs}"
  ZOPEN_CA_DIR="etc/pki/tls/certs" # Mimic location on some Linux distributions
  ZOPEN_JSON_CONFIG="${ZOPEN_ROOTFS}/etc/zopen/config.json"
  certFileName="cacert.pem"
}

generateFileSystem()
{
  if ${refresh}; then
    printHeader "Checking File System"
  else
    printHeader "Generating File System"
  fi
  printVerbose "Checking for existence of specified root: '${rootfs}'"
  [ -e "${rootfs}" ] || mkdir -p "${rootfs}" || printError "Unable to create zopen root filesystem at '${rootfs}'"
  [ -d "${rootfs}" ] || printError "Specified location '${rootfs}' is not a directory. Unable to access root file system at '${rootfs}'; check permissions"
  [ -w "${rootfs}" ] || printError "Unable to write to root file system at '${rootfs}'; check permissions"

  printVerbose "- Populating standard file system"
  [ -e "${rootfs}/bin" ] || mkdir -p "${rootfs}/bin"
  [ -e "${rootfs}/etc" ] || mkdir -p "${rootfs}/etc"
  [ -e "${rootfs}/include" ] || mkdir -p "${rootfs}/include"
  [ -e "${rootfs}/usr/share" ] || mkdir -p "${rootfs}/usr/share"
  [ -e "${rootfs}/usr/share/man" ] || mkdir -p "${rootfs}/usr/share/man"
  [ -e "${rootfs}/usr/share/zopen" ] || mkdir -p "${rootfs}/usr/share/zopen"
  [ -e "${rootfs}/var/cache/zopen" ] || mkdir -p "${rootfs}/var/cache/zopen"
  [ -e "${rootfs}/var/log" ] || mkdir -p "${rootfs}/var/log"
  [ -e "${rootfs}/var/lib/zopen" ] || mkdir -p "${rootfs}/var/lib/zopen"
  [ -e "${rootfs}/var/tmp" ] || mkdir -p "${rootfs}/var/tmp"

  printVerbose "- Creating path for bootstrap files"
  [ -e "${rootfs}/boot" ] || mkdir -p "${rootfs}/boot"

  printVerbose "- Creating symbolic path for prod redirect files"
  [ -e "${rootfs}/usr/share/zopen/boot" ] || ln -s "${rootfs}/boot" "${rootfs}/usr/share/zopen/boot"
  [ -e "${rootfs}/etc/zopen" ] || mkdir -p "${rootfs}/etc/zopen"
  
  printVerbose "- Creating product installation location"
  zopen_pkginstall="usr/local/zopen"
  [ -e "${rootfs}/${zopen_pkginstall}" ] || mkdir -p "${rootfs}/${zopen_pkginstall}"
  [ -e "${rootfs}/usr/share/zopen/prod" ] || ln -s "${rootfs}/${zopen_pkginstall}" "${rootfs}/usr/share/zopen/prod"

  printVerbose "- Creating repository directory"
  repodir="${rootfs}/etc/zopen/repos.d"
  [ -e "${repodir}" ] || mkdir -p "${repodir}"

  printVerbose "- Setting global root envvar"
  ZOPEN_PKGINSTALL="${rootfs}/${zopen_pkginstall}"
  if [ "${ZOPEN_PKGINSTALL}" = "${rootfs}" ]; then
    printError "Package install location is the zopen root location; this is not supported. Exiting".
  fi
  printVerbose "- Creating path for certificate lookups: ${rootfs}/${ZOPEN_CA_DIR}"
  [ -e "${rootfs}/${ZOPEN_CA_DIR}" ] || mkdir -p "${rootfs}/${ZOPEN_CA_DIR}"

  processCaCerts
  printInfo "- Root FS available at ${rootfs}"
}

generateZopenConfig()
{
  printHeader "Generating zopen-config"
  writeConfigFile "${configFile}" "${rootfs}" "${zopen_pkginstall}" "${ZOPEN_CA_DIR}/${certFileName}" $OVERRIDE_ZOS_TOOLS
  printInfo "- Created config in ${configFile}"
  if ${appendToProfile}; then
    if ! grep -q ". ${rootfs}/etc/zopen-config" "${HOME}/.profile"; then
      printVerbose "zopen-config line not present, proceeding to add to .profile"
  cat << EOF >>  "${HOME}/.profile"
[ -e "${rootfs}/etc/zopen-config" ] && . ${rootfs}/etc/zopen-config
EOF
    fi
  fi

  # Source the config file
  . "${configFile}"

  printHeader "Updating CA Certificate"
  export ZOPEN_CA="${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}/${certFileName}"
  caCertDir="${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}"
  mkdir -p "${caCertDir}"
  runAndLog "${MYDIR}/zopen-update-cacert -f "${caCertDir}" "
  [ $? -ne 0 ] && exit $?

  printInfo "- zopen bootstrapping complete"
}

generateJsonConfiguration()
{
  jsonConfig="${rootfs}/etc/zopen/config.json"
  jsonConfigWorking="${jsonConfig}.working"

  if [ -e "${jsonConfig}" ]; then
    # isCollectingStats is set elsewhere
    if ! releaseLine=$(jqw -r '.release_line' "${jsonConfig}"); then
      return 4
    fi
    rm_fileprocs=$(jqw -r '.num_rm_procs' "${jsonConfig}")
    if [ -z "${OVERRIDE_ZOS_TOOLS}" ] && jqw -er ".override_zos_tools" $jsonConfig >/dev/null; then
      OVERRIDE_ZOS_TOOLS=$(jqw -r '.override_zos_tools' $jsonConfig)
    fi
    autocacheclean=$(jqw -r '.autocacheclean' "${jsonConfig}")
    autopkgpurge=$(jqw -r '.autopkgpurge' "${jsonConfig}")    
  fi

  if ${releaselineDev}; then
    # Explicitly added on the command-line so use it
    releaseLine="DEV"
    printInfo "- Configured zopen to use development (DEV) releaseline packages where available"
  fi
  case "${releaseLine}" in
    "") releaseLine="STABLE"
        printInfo "- Configured zopen to use stable releaseline packages"
        ;;
    "STABLE"|"DEV") :;; # Use as-is
    *) printWarning "Current value for release line '${releaseLine}' invalid. Defaulting to 'STABLE'."
       releaseLine="STABLE"
       ;;
  esac
  case "${autocacheclean:=1}" in
    "0"|"1") :;; # Valid value
    "null") autocacheclean=1  # Default to true; jq found no entry (new config)
        ;;
    *) showConfigParmWarning "autocacheclean" "${autocacheclean}" "0|1" "1"
       autocacheclean=1
       
       ;;
  esac
  case "${autopkgpurge:=0}" in
    "0"|"1") :;; # Valid value
    "null")autopkgpurge=0  # Default to false; jq found no entry (new config)
        ;;
    *) showConfigParmWarning "autopkgpurge" "${autopkgpurge}" "0|1" "0"
       autopkgpurge=0
       ;;
  esac
  case "${OVERRIDE_ZOS_TOOLS}" in
    "true"|"false") :;; # Valid value
    "null") OVERRIDE_ZOS_TOOLS=false ;; # No entry in config file
    *) OVERRIDE_ZOS_TOOLS=false ;; # Bad envvar / empty value in config
  esac

  if [ ! -e "${jsonConfig}" ]; then
    printInfo "Generating global configuration"
    cat <<zz > "${jsonConfigWorking}"
    {
      "release_line": "${releaseLine:-STABLE}",
      "num_rm_procs": ${rm_fileprocs:-5},
      "is_collecting_stats": ${isCollectingStats},
      "override_zos_tools": ${OVERRIDE_ZOS_TOOLS},
      "autocacheclean": ${autocacheclean},
      "autopkgpurge": ${autopkgpurge}
    }
zz
  else
    printInfo "Refreshing global configuration"
    # In case 3rd-party edits have been made (adding custom keys for
    # example), just update the values that zopen itself knows about inline
    if ! jqw --arg releaseLine "${releaseLine}" \
        --arg isoverrideZOSTools ${OVERRIDE_ZOS_TOOLS} \
        --arg isCollectingStats ${isCollectingStats} \
                ".release_line = \$releaseLine | .override_zos_tools = \$isoverrideZOSTools | .is_collecting_stats = \$isCollectingStats" \
                "${jsonConfig}" > "${jsonConfigWorking}"; then
      printError "Errors updating existing configuration file. See previous errors for more information and retry command."
    fi
    mv -f "${jsonConfigWorking}" "${jsonConfig}"
  fi

}

generateDefaultRepository()
{
  # Check for existing repository definition - if present, use.
  [ -e "${rootfs}/etc/zopen/repos.d/active" ] && return 0

  # If there is no repository definition, generate a default to point to Github
  [ ! -e "${rootfs}/etc/zopen/repos.d" ] && mkdir -p "${rootfs}/etc/zopen/repos.d"

  if [ -z "${paxrepourl}" ]; then
    paxrepourl="http://raw.githubusercontent.com/${ZOPEN_ORGNAME}/meta/main/docs/api/zopen_releases.json"
  fi

  repotype="${paxrepourl%://*}"
  [ "${repotype}" = "${paxrepourl}" ] && printError "Unable to parse repository type from '${paxrepourl}'. Ensure valid format: <http|file>://<path to repo"
  
    case "${repotype}" in
    http|https|file) printDebug "configuring repo type of: '${repotype}'";;
    *) printError "Unsupported repository type of '${repotype}'"
  esac
  
  repourl="${paxrepourl#*://}"
  [ "${repourl}" = "${paxrepourl}" ] && printError "Unable to parse repository url from'${paxrepourl}'. Ensure valid format: <http|file>://<path to repo"

  repometafile="${paxrepourl##*/}"
  [ "${repometafile}" = "${paxrepourl}" ] && printError "Unable to parse repository file from '${paxrepourl}'. Ensure valid format: <http|file>://<path to repo"
  
  baserepourl="${repourl%/*}"
  [ "${baserepourl}" = "${repourl}" ] && printError "Unable to parse repository file from '${paxrepourl}'. Ensure valid format: <http|file>://<path to repo"
  
  repoFile="${rootfs}/etc/zopen/repos.d/$(echo "${repourl}" | tr -d "/[:space:]._").json"

  [ -e "${repoFile}" ] && mv "${repoFile}" "${repoFile}.$(date "+%C%m%d%H%M%S")"
  cat << EOS >  "${repoFile}"
{ 
  "type": "${repotype}", 
  "metadata_baseurl": "${baserepourl}", 
  "metadata_file": "${repometafile}" 
}
EOS
  (cd "${rootfs}/etc/zopen/repos.d" && ln -s "${repoFile}" "active")
}

generateAnalyticsConfiguration()
{
  if ! ${isCollectingStats}; then
    printVerbose "You have chosen to not collect statistics."
    return;
  fi
  jsonConfig="${rootfs}/var/lib/zopen/analytics.json"

  # if it's an existing valid json, skip
  if [ -s "${jsonConfig}" ] && jqw "." -e "${jsonConfig}" 2>/dev/null >/dev/null; then
    return;
  fi
  jsonConfigWorking="${jsonConfig}.working"

  UUID=$(generateUUID)
  cat <<zz > "${jsonConfigWorking}"
  {
    "profile": "${UUID}",
    "is_host_ibm": "${isHostIBM}",
    "is_bot": ${isBot},
    "installs": [],
    "removes": []
  }
zz
  if jqrc=$(jqw '.' "${jsonConfigWorking}" > "${jsonConfig}"); then
    rm "${jsonConfigWorking}"
  else
    printSoftError "${jqrc}"
    printError "Unable to update analystics configuration. See previous errors for more details."
  fi
  
  registerFileSystem "${UUID}" "${isHostIBM}" "${isBot}"

  if [ -n "$ZOPEN_ROOTFS" ]; then
    if [ -z "$ZOPEN_LOG_PATH" ]; then
      ZOPEN_LOG_PATH="${ZOPEN_ROOTFS}/var/log/zopen"
    fi
    if [ -f "$ZOPEN_LOG_PATH/audit.log" ]; then
      processAnalyticsFromLogFile
    fi
  fi
}

installPrereqs()
{
  printHeader "Installing zopen pre-requisites"
  # Comma-separated list of pax locations
  PAX_LOCATIONS="$CURL_PAX_LOCATION,$JQ_PAX_LOCATION,${GPG_PAX_LOCATION},${PINENTRY_PAX_LOCATION}"

  echo "$PAX_LOCATIONS" | tr ',' '\n' | while read -r pax; do
    printVerbose "- Check for shipped ${pax}"

    paxLocation=$(findrev "${MYDIR}" "${pax}")
    echo "${paxLocation}/${pax}"

    if [ -e "${paxLocation}/${pax}" ]; then
      printVerbose "- Found ${pax}. Adding to zopen cache to install as bootstrap"
      cp -f "${paxLocation}/${pax}" "${rootfs}/var/cache/zopen"
    else
      printError "Could not locate ${pax} in the zopen cache"
    fi

    printVerbose "- Expanding ${pax} to bootstrap dir..."
    cachedir="${rootfs}/var/cache/zopen"
    basepax=$(basename ${pax})
    [ -e "${cachedir}/${basepax}" ] || printError "Could not locate bootstrap ${pax}."
    paxrc=$(pax -rf "${cachedir}/${basepax}" -s##${rootfs}/boot/#)

    if [ $? -gt 0 ]; then
      printError "Failed to extract pax file ${basepax}"
    fi
 done

  # Sourcing the environment from within the actual directories
  for tool in "curl" "jq" "gnupg" "pinentry"; do
     printVerbose "Sourcing environment to trigger any setup required for ${tool}"

     tooldir=$(ls "${rootfs}/boot" | grep ${tool} | head -1)
     [ -e "${rootfs}/boot/${tooldir}" ] || printError "Could not locate ${tool} directory '${rootfs}/boot/${tooldir}/' for bootstrap. Re-run 'zopen init' to retry"
     chmod -R 755 "${rootfs}/boot/${tooldir}"
     curwd="${PWD}"
     cd "${rootfs}/boot/${tooldir}/" || printError "Could not access ${tool} bootstrap in directory '${rootfs}/boot/${tooldir}/'. Re-run 'zopen init' to retry"
     . ./.env
     cd "${curwd}" || printError "Could not change to ${curwd}. Re-run 'zopen init' to retry"
  done
  printInfo "- Sourcing environment"
}

updateBootstrappedTools() {
  printInfo "- Installing/updating bootstrapped curl, jq, gpg, pinentry and meta to install updated versions (if available)"
  installOptions="--force"
  if $bypassPrereqs; then
    installOptions="${installOptions} --bypass-prereq-checks";
  fi
  if ${refresh}; then
    ${MYDIR}/zopen-install ${installOptions} -y curl jq gpg pinentry
    toolInstall=$?
  else
    ${MYDIR}/zopen-install ${installOptions} -y curl jq gpg pinentry meta
    toolInstall=$?
  fi
  [ ${toolInstall} -ne 0 ] && printError "Unable to install curl, jq, gpg, pinentry and/or meta; see previous errors and retry the initilisation using the '--re-init' parameter"
  . "${configFile}"
}


processCaCerts()
{
  printVerbose "Configuring CA certificate file '${certFileName}'"
  cacertFound=false
  printVerbose "Check for existing ZOPEN_CA environment variable: ${ZOPEN_CA}"
  if [ -f "${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}/${certFileName}" ]; then
    cacertFound=true
  elif [ -n "${ZOPEN_CA}" ]; then
    printVerbose "Existing envvar for ZOPEN_CA found: ${ZOPEN_CA}"
    if [ -r "${ZOPEN_CA}" ]; then
      printVerbose "- Found existing setting for ZOPEN_CA '${ZOPEN_CA}'; reusing certificate"
      if [ "${ZOPEN_CA}" != "${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}/${certFileName}" ]; then # avoid cp error
        cp -f "${ZOPEN_CA}" "${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}"
      fi
      cacertFound=true
    else
      printVerbose "Unable to use Certificate file '${certFileName}' specified in environment variable ZOPEN_CA='${ZOPEN_CA}'. "
    fi
  else
    printVerbose "No current value for ZOPEN_CA environment variable"
  fi
  if ! ${cacertFound}; then
    printVerbose "Checking '${MYDIR}' directory tree for certificate file '${certFileName}'"
    cacertlcn="$(findrev "${MYDIR}" "${certFileName}")"
    if [ -e "${cacertlcn}/${certFileName}" ]; then
      printVerbose "- Found default certificate file '${certFileName}'; copying to zopen file system"
      cp -f "${cacertlcn}/${certFileName}" "${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}"
      cacertFound=true
    else
      printVerbose "Could not locate certificate file in directory structure"
    fi
  fi
  if ! ${cacertFound}; then
    cacertlcn="${MYDIR}/../../${ZOPEN_CA_DIR}/${certFileName}"
    printVerbose "Attempting relative search for certificate file at '${cacertlcn}'"
    if [ -r "${cacertlcn}" ]; then
      printVerbose "- Found existing certificate file ${certFileName}'; copying to zopen file system"
      cp -f "${cacertlcn}" "${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}"
      cacertFound=true
    else
      printVerbose "Relative search did not locate certificate file"
    fi
  fi
  if ! ${cacertFound}; then
    printError "Could not find '${certFileName}' to copy to new environment. Re-run 'zopen init' with the '--verbose' option for more details"
  fi

  if [ -r "${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}/${certFileName}" ]; then
    printInfo "- Setting certificate environment variable"
    export SSL_CERT_FILE="${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}/${certFileName}"
  else
    printError "- Could not access '${certFileName}' in '${ZOPEN_ROOTFS}/${ZOPEN_CA_DIR}'"
  fi
}

deinit()
{
  printHeader "Initialization successfully completed"
  printInfo "${NC}${YELLOW}IMPORTANT: Run '. ${rootfs}/etc/zopen-config' to enable zopen environment for current session or add it to your .profile.${NC}"
  printInfo "${NC}${YELLOW}IMPORTANT: If you prefer GNU tools over z/OS /bin tools, run '. ${rootfs}/etc/zopen-config --override-zos-tools' in the current session or add it to your .profile.${NC}"
  syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_PACKAGE},${CAT_FILE}" "INIT" "" "zopen environment initialised as ${ZOPEN_ROOTFS}"
  if ! ${refresh}; then
    myparent="$(cd "$(dirname "${MYDIR}")" >/dev/null 2>&1 && pwd -P )"
    myparentpaxz="${myparent}.pax.Z"
    if [ -d "${myparent}" ] && [ -f "${myparentpaxz}" ]; then
      printInfo "${NC}${GREEN}You can now safely delete the pax file ${myparentpaxz} and ${myparent} directory.${NC}"
    fi
  fi
}

init
generateFileSystem
! ${refresh} && installPrereqs
generateJsonConfiguration
generateDefaultRepository
generateAnalyticsConfiguration
! ${refresh} && updateBootstrappedTools
[ -e "${ZOPEN_ROOTFS}/var/lib/zopen/packageDB.json" ] || updatePackageDB
updateBootstrappedTools
deinit
