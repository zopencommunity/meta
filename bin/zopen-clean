#!/bin/sh
#
# Cleanup utility for zopen community - https://github.com/zopencommunity
#

#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  # shellcheck disable=SC1091
  . "${INCDIR}/common.sh"
}
setupMyself
checkWritable

printHelp()
{
  cat << HELPDOC
${ME} is a utility for zopen community to remove unneeded resources
from the system to save space and prevent clutter.

Usage: ${ME} [OPTION] [PACKAGE]

Options:
  --deep            deep clean - run all cleanup operations                    
  --all             apply cleanup command to all applicable packages.
  -c, --cache  [PACKAGE ...]
                    cleans the downloaded package cache; packages will be
                    re-downloaded if needed.
  -d, --dangling    removes dangling symlinks from the zopen file system in
                    case of issues during package maintenance.
  -h, --help, -?    display this help and exit.
  -m, --metadata    cleans and refreshes the metadata for zopen.
  -u, --unused [PACKAGE ...]
                    remove versions of PACKAGEs that are available as
                    alternatives, leaving only the currently active version.
  --nostats         do not output statistics from the clean operation(s)
  -v, --verbose     run in verbose mode.
  --version         print version.

Examples:
  zopen clean -c    clear the package download cache
  zopen clean -d    analyse the zopen file system and remove dangling symlinks
  zopen clean -u [PACKAGE]
                    remove unused versions for PACKAGE
  zopen clean -u --all 
                    remove all unused packages within the zopen environment
  zopen clean --deep 
                    

Report bugs at https://github.com/zopencommunity/meta/issues.

HELPDOC
}


removeUnusedPackageVersions()
{
  needle=$1
  [ -z "${needle}" ] && return
  [ ! -e "${ZOPEN_PKGINSTALL}/${needle}" ] && printInfo "No versions of '${needle}' found" && continue

  current=$(getCurrentVersionDir "${needle}")

  if [ -n "${current}" ]; then
    current=$(basename "${current}")
  else
    printInfo "No currently active version of '${needle}'; removing all versions"
  fi
  
  counterfile=$(mktempfile "clean" ".rupv")
  addCleanupTrapCmd "rm -f ${counterfile}"
  cd "${ZOPEN_PKGINSTALL}/${needle}" && zosfind . -name "./*" -prune -type d > "${counterfile}"
  while read repo; do
    printVerbose "Parsing repo: '${repo}' as '${repo#./}'"
    repo="${repo#./}"
    if [ "${current}" = "${repo}" ]; then
      printVerbose "${NC}${GREEN}-> ${repo}  <- Current version${NC}"
    else
      deref=$(cd "${ZOPEN_PKGINSTALL}/${needle}/${repo}" && pwd -P)
      if [ "${deref}" != "/" ]; then
        rm -rf "${deref}" > /dev/null 2>&1
        printInfo "-  ${repo} <- Removed"
        syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_FILE},${CAT_PACKAGE},${CAT_REMOVE}" "CLEAN" "cleanUnused" "Removed unused package at ${repo#"${ZOPEN_PKGINSTALL}"/} "
        unusedCount=$((unusedCount + 1 ))
      else
        printError "Logic error - attempt to remove '/';ZOPEN_ROOTFS=${ZOPEN_ROOTFS};ZOPEN_PKGINSTALL=${ZOPEN_PKGINSTALL};needle=${needle};repo=${repo};"
        return 1
      fi
    fi
  done < "${counterfile}"
  return 0
}

cleanUnused()
{
  ${deep} && printInfo "Removing any unused package versions"
  unusedCount=0  # Updated within the removeUnusedPackageVersions function
  if ${all}; then 
    zopen list --installed --no-header --no-version | while read -r needle; do 
      removeUnusedPackageVersions "${needle}"
    done
  elif [ -z "$1" ]; then
    printError "No packages selected for pruning. Specify package list or use parameter '--all'"
  else
   for needle in $1; do
      removeUnusedPackageVersions "${needle}"
    done
  fi
  $stats && printInfo "Removed ${unusedCount} unused package version"$([ ${unusedCount} -eq 1 ] || echo 's')
}

cleanDangling()
{
  ${deep} && printInfo "Purging any dangling symlinks with the zopen environment"
  printVerbose "Removing dangling symlinks from the file structure"
  # As packages can install to any subfolder of the zopen filesystem, need to traverse
  # along every path under that filesystem
  deref=$(cd "${ZOPEN_ROOTFS}" && pwd -P)
  if [ "${deref}" = "/" ]; then
    printWarning "With zopen's root configured as '/', traversal to find dangling symlinks"
    printWarning "will occur on ALL mounted file systems, ALL sub-directories and will"
    printWarning "attempt to remove any dangling symlinks it finds, regardless of how they"
    printWarning "were created or which package/product/install mechanism was used and if "
    printWarning "the user has permission to do so (errors will be reported if not)."
    printWarning "This is due to individual packages potentially installing to any location"
    printWarning "within the zopen file structure so all locations need to be considered"
    printWarning "and analysed."
    printWarning "Are you absolutely sure you want to run this option (y/N)?"
    read absolutely < /dev/tty
    if [ -n "${absolutely}" ] && [ "y" = "${absolutely}" ]; then
      printInfo "- Checking for any dangling symlinks across system"
    else
      exit 4
    fi
  fi
  progressHandler "linkcheck" "- Dangling link removal complete" &
  ph=$!
  killph="kill -HUP ${ph}"
  addCleanupTrapCmd "${killph}"

  counterfile=$(mktempfile "clean" ".sl")
  addCleanupTrapCmd "rm -f ${counterfile}"
  zosfind "${ZOPEN_ROOTFS}" -type l -exec test ! -e {} \; -print > "${counterfile}"
  counter=0
  while IFS= read -r sl; do
    printVerbose "Removing dangling symlink '${sl}'"
    rm -f "${sl}"
    counter=$((counter + 1))
  done < "${counterfile}"
  ${killph} 2> /dev/null # if the timer is not running, the kill will fail

  syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_FILE}" "CLEAN" "cleanDangling" "zopen system at '${ZOPEN_ROOTFS}' scanned for dangling symlinks"

  ${stats} && printInfo "Cleaned ${counter} dangling symlink$( [ "$counter" -eq 1 ] || echo s )"
}

cleanPackageCache()
{
  ${deep} && printInfo "Cleaning cached package files"
  # "All" option ignores the input parameter list as it brute force-cleans the cache rather
  # than cherry-pick the files to remove which would be slowed
  if ${all}; then
    printVerbose "Cleaning all cached packages in ${ZOPEN_ROOTFS}/var/cache/zopen"
    # If we delete the pax, we need to delete the metadata and vice-versa
    rm -rf "${ZOPEN_ROOTFS}"/var/cache/zopen/*.pax.Z  # We actively want globbing
    rm -rf "${ZOPEN_ROOTFS}"/var/cache/zopen/*.pax.Z.json  # We actively want globbing
    syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_FILE}" "CLEAN" "cleanPackageCache" "Main cache in ${ZOPEN_ROOTFS}/var/cache/zopen cleaned"
    printInfo "- Cache at '${ZOPEN_ROOTFS}/var/cache/zopen' cleaned"
  else
    for needle in $1; do
      printVerbose "Cleaning ${ZOPEN_ROOTFS}/var/cache/zopen entries for '${needle}"
      zosfind "${ZOPEN_ROOTFS}"/var/cache/zopen -name "${needle}-*" -exec rm {} \;
      syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_FILE}" "CLEAN" "cleanPackageCache" "Cache for '${needle}' in ${ZOPEN_ROOTFS}/var/cache/zopen cleaned."
      printVerbose "- Cleaned cached files for '${needle}' in cache at '${ZOPEN_ROOTFS}/var/cache/zopen'."
    done
  fi
}

cleanMetadata()
{
  ${deep} && printInfo "Cleaning zopen metadata"
  if ${verbose} || ${stats}; then
    lsBefore=$(mktempfile "clean" ".metadata")
    addCleanupTrapCmd "rm -f ${lsBefore}"
    lsAfter=$(mktempfile "clean" ".metadata")
    addCleanupTrapCmd "rm -f ${lsAfter}"
    ls "${ZOPEN_ROOTFS}/var/cache/zopen" > "$lsBefore" 2>/dev/null || printError "Unable to generate file listing at ${ZOPEN_ROOTFS}/var/cache/zopen. Check permissions and retry."
  fi
  # Zopen metadata should prefix with the zopen_*
  printVerbose "Clearing meta info files from ${ZOPEN_ROOTFS}/var/cache/zopen"
  rm "${ZOPEN_ROOTFS}"/var/cache/zopen/zopen_* > /dev/null 2>&1 || printError "Unable to clear zopen's metadata from ${ZOPEN_ROOTFS}/var/cache/zopen. Check permissions and retry."
  if ${verbose} || ${stats}; then
    ls "${ZOPEN_ROOTFS}/var/cache/zopen" > "$lsAfter" 2>/dev/null || printError "Unable to generate file listing at ${ZOPEN_ROOTFS}/var/cache/zopen. Check permissions and retry."
    wcBefore=$(wc -l < "$lsBefore")
    wcAfter=$(wc -l < "$lsAfter")
    countDiff=$((wcBefore - wcAfter))
    if ${verbose}; then
      printInfo "- Removed the following $countDiff file$( [ "$countDiff" -eq 1 ] || echo s ):"
      grep -Fxv -f "$lsAfter" "$lsBefore" 2> /dev/null
    elif ${stats}; then
      printInfo "- Removed $countDiff metadata file$( [ "$countDiff" -eq 1 ] || echo s )"
    fi
  fi

}

# Main code start here
args=$*
verbose=false
debug=false
unused=false
dangling=false
cache=false
all=false
packagelist=""
meta=false
stats=true
deep=false

if [ $# -eq 0 ]; then
  printError "No option provided for cleaning"
fi
while [ $# -gt 0 ]; do
  printVerbose "Parsing option: $1"
  case "$1" in
  "--deep")
    stats=true
    deep=true
    all=true
    unused=true
    dangling=true
    cache=true
    meta=true    
    ;;
  "--nostats")
    stats=false
    ;;
  "-u" | "--unused")
    unused=true
    ;;
  "--all")
    all=true
    ;;
  "-d" | "--dangling")
    dangling=true
    ;;
  "-c" | "--cache")
    cache=true
    ;;
  "-m" | "--metadata")
    meta=true
    ;;
  "-h" | "--help" | "-?")
    printHelp "${args}"
    exit 0
    ;;
  "--version")
    zopen-version ${ME}
    exit 0
    ;;
  "-v" | "--verbose")
    verbose=true
    ;;
  "--debug")
    # shellcheck disable=SC2034
    verbose=true
    # shellcheck disable=SC2034
    debug=true
    ;;
  *)
    packagelist=$(printf "%s %s" "${packagelist}" "$1") # Use the last unrecognised parameter as the package
    ;;
  esac
  shift
done

${stats} && beforeUsage=$(diskusage "${ZOPEN_ROOTFS}")

${dangling} && cleanDangling
${meta} && cleanMetadata

if $cache && [ -z "${packagelist}" ]; then
  all=true
fi

${unused} && cleanUnused "${packagelist}"
${cache} && cleanPackageCache "${packagelist}"

if ${stats}; then 
  afterUsage=$(diskusage "${ZOPEN_ROOTFS}")
  printInfo "- Disk usage: Before: $(formattedFileSize "${beforeUsage}"); After: $(formattedFileSize "${afterUsage}"); Reclaimed: $(formattedFileSize $((beforeUsage - afterUsage)))"
fi

# At this point, commands completed successfully
exit 0
