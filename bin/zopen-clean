#!/bin/sh
#
# Cleanup utility for zopen community - https://github.com/zopencommunity
#

#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  # shellcheck disable=SC1091
  . "${INCDIR}/common.sh"
}
setupMyself
checkWritable

printHelp()
{
  cat << HELPDOC
${ME} is a utility for zopen community to remove uneeded resources
from the system to save space and prevent clutter.

Usage: ${ME} [OPTION] [PACKAGE]

Options:
  --all             apply cleanup command to all applicable packages.
  -c, --cache  [PACKAGE ...]
                    cleans the downloaded package cache; packages will be
                    re-downloaded if needed.
  -d, --dangling    removes dangling symlinks from the zopen file system in
                    case of issues during package maintenance.
  -h, --help, -?    display this help and exit.
  -m, --metadata    cleans and refreshes the metadata for zopen.
  -u, --unused [PACKAGE ...]
                    remove versions of PACKAGEs that are available as
                    alternatives, leaving only the currently active version.
  -v, --verbose     run in verbose mode.
  --version         print version.

Examples:
  zopen clean -c    clear the package download cache
  zopen clean -d    analyse the zopen file system and remove dangling symlinks
  zopen clean -u [PACKAGE]
                    remove unused versions for PACKAGE

Report bugs at https://github.com/zopencommunity/meta/issues.

HELPDOC
}

cleanUnused()
{
  for needle in $1; do
    [ -z "${needle}" ] && return
    [ ! -e "${ZOPEN_PKGINSTALL}/${needle}" ] && printInfo "No versions of '${needle}' found" && continue

    current=$(getCurrentVersionDir "${needle}")

    if [ -n "${current}" ]; then
      current=$(basename "${current}")
    else
      printInfo "No currently active version of '${needle}'; removing all versions"
    fi

    cd "${ZOPEN_PKGINSTALL}/${needle}" && zosfind . -name "./*" -prune -type d |
    while read repo; do
      printVerbose "Parsing repo: '${repo}' as '${repo#./}'"
      repo="${repo#./}"
      if [ "${current}" = "${repo}" ]; then
        printInfo "${NC}${GREEN}-> ${repo}  <- Current version${NC}"
      else
        deref=$(cd "${ZOPEN_PKGINSTALL}/${needle}/${repo}" && pwd -P)
        [ "${deref}" = "/" ] || rm -rf "${deref}" > /dev/null 2>&1
        printInfo "-- ${repo} <- Removed"
        syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_FILE},${CAT_PACKAGE},${CAT_REMOVE}" "CLEAN" "cleanUnused" "Removed unused package at ${repo#"${ZOPEN_PKGINSTALL}"/} "
      fi
    done
  done
}

cleanDangling()
{
  printVerbose "Removing dangling symlinks from the file structure"
  # As packages can install to any subfolder of the zopen filesystem, need to traverse
  # along every path under that filesystem
  deref=$(cd "${ZOPEN_ROOTFS}" && pwd -P)
  if [ "${deref}" = "/" ]; then
    printWarning "With zopen's root configured as '/', traversal to find dangling symlinks"
    printWarning "will occur on ALL mounted file systems, ALL sub-directories and will"
    printWarning "attempt to remove any dangling symlinks it finds, regardless of how they"
    printWarning "were created or which package/product/install mechanism was used and if "
    printWarning "the user has permission to do so (errors will be reported if not)."
    printWarning "This is due to individual packages potentially installing to any location"
    printWarning "within the zopen file structure so all locations need to be considered"
    printWarning "and analysed."
    printWarning "Are you absolutely sure you want to run this option (y/N)?"
    read absolutely < /dev/tty
    if [ -n "${absolutely}" ] && [ "y" = "${absolutely}" ]; then
      printInfo "- Checking for any dangling symlinks across system"
    else
      exit 4
    fi
  fi
  progressHandler "spinner" "- Dangling link removal complete" &
  ph=$!
  killph="kill -HUP ${ph}"
  addCleanupTrapCmd "${killph}"
  zosfind "${ZOPEN_ROOTFS}" -type l -exec test ! -e {} \; -print | while read sl; do
    printVerbose "Removing dangling symlink '${sl}'"
    rm -f "${sl}"
  done
  ${killph} 2> /dev/null # if the timer is not running, the kill will fail
  waitforpid ${ph}  # Make sure it's finished writing to screen
  syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_FILE}" "CLEAN" "cleanDangling" "zopen system at '${ZOPEN_ROOTFS}' scanned for dangling symlinks"
}

cleanPackageCache()
{
  # "All" option ignores the input parameter list as it brute force-cleans the cache rather
  # than cherry-pick the files to remove which would be slowed
  if ${all}; then
    printVerbose "Cleaning all cached packages in ${ZOPEN_ROOTFS}/var/cache/zopen"
    rm -rf "${ZOPEN_ROOTFS}"/var/cache/zopen/*.pax.Z  # We actively want globbing
    syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_FILE}" "CLEAN" "cleanPackageCache" "Main cache in ${ZOPEN_ROOTFS}/var/cache/zopen cleaned"
    printInfo "- Cache at '${ZOPEN_ROOTFS}/var/cache/zopen' cleaned"
  else
    for needle in $1; do
      printVerbose "Cleaning ${ZOPEN_ROOTFS}/var/cache/zopen entries for '${needle}"
      zosfind "${ZOPEN_ROOTFS}"/var/cache/zopen -name "${needle}-*" -exec rm {} \;
      syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_FILE}" "CLEAN" "cleanPackageCache" "Cache for '${needle}' in ${ZOPEN_ROOTFS}/var/cache/zopen cleaned."
      printVerbose "- Cleaned cached files for '${needle}' in cache at '${ZOPEN_ROOTFS}/var/cache/zopen'."
    done
  fi
}

cleanMetadata()
{
  # Zopen metadata should prefix with the zopen_*
  printVerbose "Clearing meta info files from ${ZOPEN_ROOTFS}/var/cache/zopen"
  rm "${ZOPEN_ROOTFS}"/var/cache/zopen/zopen_* || printError "Unable to clear metadata from ${ZOPEN_ROOTFS}/var/cache/zopen. Check permissions and retry."
}

# Main code start here
args=$*
verbose=false
debug=false
unused=false
dangling=false
cache=false
all=false
packagelist=""
meta=false

if [ $# -eq 0 ]; then
  printError "No option provided for cleaning"
fi
while [ $# -gt 0 ]; do
  printVerbose "Parsing option: $1"
  case "$1" in
  "-u" | "--unused")
    unused=true
    dangling=false
    ;;
  "--all")
    all=true
    ;;
  "-d" | "--dangling")
    unused=false
    dangling=true
    cache=false
    meta=false
    ;;
  "-c" | "--cache")
    dangling=false
    cache=true
    ;;
  "-m" | "--metadata")
    dangling=false
    meta=true
    ;;
  "-h" | "--help" | "-?")
    printHelp "${args}"
    exit 0
    ;;
  "--version")
    zopen-version ${ME}
    exit 0
    ;;
  "-v" | "--verbose")
    verbose=true
    ;;
  "--debug")
    # shellcheck disable=SC2034
    verbose=true
    # shellcheck disable=SC2034
    debug=true
    ;;
  *)
    packagelist=$(printf "%s %s" "${packagelist}" "$1") # Use the last unrecognised parameter as the package
    ;;
  esac
  shift
done

${dangling} && cleanDangling && exit
${meta} && cleanMetadata

getRepos
if $all; then
  printVerbose "Generating complete list of all packages"
  # shellcheck disable=SC2154
  for repo in ${repo_results}; do
    cleanlist="${cleanlist} ${repo}"
  done
elif [ -n "$packagelist" ]; then
  for pkg in $(echo "${packagelist}" | tr ',' ' ' | tr -s ' '); do
    pkgfound=$(echo "${repo_results}" | awk -vpkg="${pkg}" '$0 == pkg {print}')
    if [ "${pkgfound}" = "${pkg}" ]; then
      printVerbose "Adding '${pkg}' to the clean queue."
      cleanlist=$(printf "%s %s" "${cleanlist}" "${pkg}")
    else
      invalidlist=$(printf "%s %s" "${invalidlist}" "${pkg}")
    fi
  done
  [ -n "${invalidlist}" ] && printError "The following package(s) were invalid and cannot be cleaned:\n${invalidlist}"
elif [ ${cache} ]; then
  printVerbose "Default for --cache is all ${NC}${BOLD}installed${NC} packages"
  all=true
else
  [ -z "${packagelist}" ] && printError "Missing parameters. Correct command syntax and retry."
fi
${unused} && cleanUnused "${cleanlist}"
${cache} && cleanPackageCache "${cleanlist}"

# At this point, commands completed successfully
exit 0
