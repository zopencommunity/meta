#!/bin/sh
#
# Install utility for zopen community - https://github.com/zopencommunity
#

#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
#set -x
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself
checkWritable

testGPGAgentSocket() {
  SOCKET_PATH="$1"
  if ! gpg-connect-agent --socket="$SOCKET_PATH" /bye >/dev/null 2>&1; then
    return 1
  fi
  return 0
}

startGPGAgent() {
  printInfo "- Starting gpg-agent..."

  SOCKET_PATH=$(gpgconf --list-dirs agent-socket)
  if testGPGAgentSocket "$SOCKET_PATH"; then
    printVerbose "gpg-agent is already running (socket found at $SOCKET_PATH)."
    return 0
  else
    printWarning "Found orphaned socket at $SOCKET_PATH. Will attempt to restart gpg-agent."
    rm -f "$SOCKET_PATH"
  fi

  if eval "$(gpg-agent --daemon --disable-scdaemon)" >/dev/null 2>&1; then
    if [ -r "$SOCKET_PATH" ]; then
      printVerbose "gpg-agent started successfully (socket created at $SOCKET_PATH)."
    else
      printWarning "gpg-agent started, but socket was not created at $SOCKET_PATH. Please verify your GPG installation."
    fi
  else
    if [ -r "$SOCKET_PATH" ]; then
      printWarning "gpg-agent started successfully (socket created at $SOCKET_PATH), but gpg-agent returned a non-zero return code."
    else
      printError "Failed to start gpg-agent. Reinstall or upgrade GPG using \"zopen install --reinstall gpg -y\" or \"zopen upgrade gpg -y\"."
    fi
  fi
}

gpgCleanup() {
  printVerbose "Cleaning up $SIGNATURE_FILE, $PUBLIC_KEY_FILE and $TMP_GPG_DIR"
  [ -e "$SIGNATURE_FILE" ] && rm -f "$SIGNATURE_FILE"
  [ -e "$PUBLIC_KEY_FILE" ] && rm -f "$PUBLIC_KEY_FILE"
  [ -d "$TMP_GPG_DIR" ] && rm -rf "$TMP_GPG_DIR"
}

verifySignatureOfPax()
{
  printInfo "- Performing GPG signature verification of pax file..."
  # Extracting values and checking for errors
  if ! FILE_TO_VERIFY=$(jq -e -r '.product.pax' "${metadataFile}"); then
     printError "Failed to extract 'pax' from ${metadataFile}" >&2
  fi

  if ! SIGNATURE=$(jq -e -r '.product.signature' "${metadataFile}"); then 
    printVerbose "Failed to extract 'signature' from ${metadataFile}" >&2
    return
  fi

  if ! PUBLIC_KEY=$(jq -e -r '.product.public_key' "${metadataFile}"); then 
     printError "Failed to extract 'public_key' from ${metadataFile}" >&2
  fi


  # Create a temporary directory for GPG keyring
  TMP_GPG_DIR="$zopen_tmp_dir/zopen_gpg_verify_$LOGNAME_$$"
  mkdir -p "$TMP_GPG_DIR"

  SIGNATURE_FILE="$zopen_tmp_dir/zopen_signedfile.$LOGNAME.$$.asc"
  PUBLIC_KEY_FILE="$zopen_tmp_dir/zopen_scriptpubkey.$LOGNAME.$$.asc"
  printf "%b" "$SIGNATURE" | tr -d '"'  > "$SIGNATURE_FILE"
  printf "%b" "$PUBLIC_KEY" | tr -d '"'  > "$PUBLIC_KEY_FILE"

  startGPGAgent

  printVerbose "Importing public key..."
  gpg_output=$(gpg --no-default-keyring --keyring "$TMP_GPG_DIR/pubring.kbx" --batch --yes --import "$PUBLIC_KEY_FILE" 2>&1)
  if [ $? -ne 0 ]; then
    gpgCleanup
    printError "Importing public key failed. See output:\n$gpg_output.\n Verification aborted."
  fi
  printVerbose "$gpg_output"

  # Verify that the key was imported successfully
  printVerbose "Checking if public key is imported..."
  gpg_output=$(gpg --no-default-keyring --keyring "$TMP_GPG_DIR/pubring.kbx" --check-sigs 2>&1)
  if [ $? -ne 0 ]; then
    gpgCleanup
    printError "Public key was not imported. See output:\n$gpg_output.\nVerification aborted."
  fi
  printVerbose "$gpg_output"

  # Verify the signature
  printInfo "- Verifying the gpg signature..."
  if [ ! -f "$SIGNATURE_FILE" ]; then
    gpgCleanup
    printError "Signature file does not exist. Please raise an issue."
  fi

  gpg_output=$(gpg --no-default-keyring --keyring "$TMP_GPG_DIR/pubring.kbx" --verify "$SIGNATURE_FILE" "$FILE_TO_VERIFY" 2>&1)
  printVerbose "$gpg_output"
  if echo "$gpg_output" | grep -q "Good signature from"; then
    gpgCleanup
    printInfo "- Signature successfully verified."
  else
    gpgCleanup
    printError "Verification failed. See the output:\n$gpg_output"
  fi
}

printSyntax()
{
  args=$*
cat << HELPDOC
${ME} is a utility to download/install a zopen community package.

Usage: ${ME} [OPION] [PACKAGE]
  [PACKAGE] is a package to install. Multiple packages can be specified.

Options:
  --all                    download/install all zopen community packages.
  --cache-only             do not install dependencies.
  --download-only          download package to current directory.
  --help                   print this help.
  --install-or-upgrade     installs the package if not installed,
                           or upgrades the package if installed.
  --bypass-prereq-checks   Ignores pre-req checks
  --local-install          download and unpackage to current directory.
  --no-deps                do not install dependencies.
  --no-set-active          do not change the pinned version.
  --nosymlink              do not integrate into filesystem through
                           symlink redirection.
  -r, --reinstall          reinstall already installed zopen community packages.
  --release-line [stable, dev] the release line to build off of.
  --select                 select a version to install.
  --skip-upgrade           do not upgrade.
  --force                  force install, bypassing locks.
  -u, --update, --upgrade  updates installed zopen community packages.
  -v, --verbose            print verbose messages.
  --version                print version.
  -y, --yes                automatically answer yes to prompts.

HELPDOC
}

installDependencies()
(
  name=$1
  printVerbose "List of dependencies to install: ${dependencies}"
  skipupgrade_lcl=${skipupgrade}
  skipupgrade=true
  skipverify=false;
  echo "${dependencies}" | xargs | tr ' ' '\n' | sort | while read dep; do
    printVerbose "Removing '${dep}' from dependency queue '${dependencies}'"
    dependencies=$(echo "${dependencies}" | sed -e "s/${dep}//" | tr -s ' ')
    handlePackageInstall "${dep}" true
  done
  skipupgrade=${skipupgrade_lcl}
)

handlePackageInstall()
{

  fullname="$1"
  isRuntimeDependency=$2
  if [ -z "$isRuntimeDependency" ]; then
    isRuntimeDependency=false
  fi
  printVerbose "Name to install: ${fullname}, parsing any version ('=') or tag ('%') has been specified"
  name=$(echo "${fullname}" | sed -e 's#[=%].*##')
  repo="${name}"
  versioned=$(echo "${fullname}" | cut -s -d '=' -f 2)
  tagged=$(echo "${fullname}" | cut -s -d '%' -f 2)
  printDebug "Name:${name};version:${versioned};tag:${tagged};repo:${repo}"
  printInfo "${NC}${HEADERCOLOR}${BOLD}Processing package: ${name}${NC}"

  nameSansPort=$(echo "${name}" | sed -e 's#\(.*\)port$#\1#')
  # findutilsport -> findutils
  # findutils -> findutils
  if [[ "${nameSansPort}" != "${name}" ]] ; then
    printError "Please install using base project name without port suffix.\nTry: zopen install ${nameSansPort}"
  fi

  getAllReleasesFromGithub "${repo}"

  if ${localInstall}; then
    printVerbose "Local install to current directory"
    rootInstallDir="${PWD}"
  else
    printVerbose "Setting install root to: ${ZOPEN_PKGINSTALL}"
    rootInstallDir="${ZOPEN_PKGINSTALL}"
  fi

  originalFileVersion=""
  printVerbose "Checking for meta files in '${rootInstallDir}/${name}/${name}'"
  printVerbose "Finding version/release information."
  if [ -e "${rootInstallDir}/${name}/${name}/.releaseinfo" ]; then
    originalFileVersion=$(cat "${rootInstallDir}/${name}/${name}/.releaseinfo")
    printVerbose "Found originalFileVersion=${originalFileVersion} (port is already installed)."
  elif [ -e "${rootInstallDir}/${name}/${name}/.version" ]; then
    originalFileVersion=$(cat "${rootInstallDir}/${name}/${name}/.version")
    printVerbose "Found originalFileVersion=${originalFileVersion} (port is already installed)."
  else
    printVerbose "Could not detect existing installation at ${rootInstallDir}/${name}/${name}"
  fi

  printVerbose "Finding releaseline information."
  installedReleaseLine=""
  if [ -e "${rootInstallDir}/${name}/${name}/.releaseline" ]; then
    installedReleaseLine=$(cat "${rootInstallDir}/${name}/${name}/.releaseline")
    printVerbose "Installed product from releaseline: ${installedReleaseLine}"
  else
    printVerbose "No current releaseline for package."
  fi

  releaseMetadata=""
  downloadURL=""
  # Options where the user explicitly sets a version/tag/releaseline currently ignore any configured release-line,
  # either for a previous package install or system default
  if [ -n "${versioned}" ]; then
    printVerbose "Specific version ${versioned} requested - checking existence and URL."
    requestedMajor=$(echo "${versioned}" | awk -F'.' '{print $1}')
    requestedMinor=$(echo "${versioned}" | awk -F'.' '{print $2}')
    requestedPatch=$(echo "${versioned}" | awk -F'.' '{print $3}')
    requestedSubrelease=$(echo "${versioned}" | awk -F'.' '{print $4}')
    requestedVersion="${requestedMajor}\\\.${requestedMinor}\\\.${requestedPatch}\\\.${requestedSubrelease}"
    printVerbose "Finding URL for latest release matching version prefix: requestedVersion: ${requestedVersion}"
    releaseMetadata=$(/bin/printf "%s" "${releases}" | jq -e -r '. | map(select(.assets[].name | test("'${requestedVersion}'")))[0]')
  elif [ -n "${tagged}" ]; then
    printVerbose "Explicit tagged version '${tagged}' specified. Checking for match."
    releaseMetadata=$(/bin/printf "%s" "${releases}" | jq -e -r '.[] | select(.tag_name == "'${tagged}'")')
    printVerbose "Use quick check for asset to check for existence of metadata for specific messages."
    asset=$(/bin/printf "%s" "${releaseMetadata}" | jq -e -r '.assets[0]')
    if [ $? -ne 0 ]; then
      printError "Could not find release tagged '${tagged}' in repo '${repo}'"
    fi
  elif ${selectVersion}; then
    # Explicitly allow the user to select a release to install; useful if there are broken installs
    # as a known good release can be found, selected and pinned!
    printVerbose "List individual releases and allow selection."
    i=$(/bin/printf "%s" "${releases}" | jq -r 'length - 1')
    printInfo "Versions available for install:"
    /bin/printf "%s" "${releases}" | jq -e -r 'to_entries | map("\(.key): \(.value.tag_name) - \(.value.assets[0].name) - size: \(.value.assets[0].expanded_size | tonumber/ (1024 * 1024))mb")[]'

    printVerbose "Getting user selection."
    valid=false
    while ! ${valid}; do
      echo "Enter version to install (0-${i}): "
      read selection < /dev/tty
      if [[ ! -z $(echo "${selection}" | sed -e 's/[0-9]*//') ]]; then
        echo "Invalid input, must be a number between 0 and ${i}."
      elif [ "${selection}" -ge 0 ] && [ "${selection}" -le "${i}" ]; then
        valid=true
      fi
    done
    printVerbose "Selecting item ${selection} from array"
    releaseMetadata="$(/bin/printf "%s" "${releases}" | jq -e -r ".[${selection}]")"

  elif [ ! -z "${releaseLine}" ]; then
    printVerbose "Install from release line '${releaseLine}' specified"
    validatedReleaseLine=$(validateReleaseLine "${releaseLine}")
    if [ -z "${validatedReleaseLine}" ]; then
      printError "Invalid releaseline specified: '${releaseLine}'; Valid values: DEV or STABLE."
    fi
    printVerbose "Finding latest asset on the release line"
    releaseMetadata="$(/bin/printf "%s" "${releases}" | jq -e -r '. | map(select(.tag_name | startswith("'${releaseLine}'")))[0]')"
    printVerbose "Use quick check for asset to check for existence of metadata."
    asset="$(/bin/printf "%s" "${releaseMetadata}" | jq -e -r '.assets[0]')"
    if [ $? -ne 0 ]; then
      printError "Could not find release-line ${releaseLine} for repo: ${repo}."
    fi

  else
    printVerbose "No explicit version/tag/releaseline, checking for pre-existing package&releaseline."
    if [ -n "${installedReleaseLine}" ]; then
      printVerbose "Found existing releaseline '${installedReleaseLine}', restricting to only that releaseline."
      validatedReleaseLine="${installedReleaseLine}" # Already validated when stored
    else
      printVerbose "Checking for system-configured releaseline."
      sysrelline=$(getReleaseLine)
      printVerbose "Validating value: ${sysrelline}"
      validatedReleaseLine=$(validateReleaseLine "${sysrelline}")
      if [ -n "${validatedReleaseLine}" ]; then
        printVerbose "zopen system configured to use releaseline '${sysrelline}'; restricting to that releaseline."
      else
        printWarning "zopen misconfigured to use an unknown releaseline of '${sysrelline}'; defaulting to STABLE packages."
        printWarning "Set the contents of '${ZOPEN_ROOTFS}/etc/zopen/releaseline' to a valid value to remove this message."
        printWarning "Valid values are: DEV | STABLE."
        validatedReleaseLine="STABLE"
      fi
    fi
    # We have some situations that could arise
    # 1. the port being installed has no releaseline tagging yet (ie. no releases tagged STABLE_* or DEV_*)
    # 2. system is configured for STABLE but only has DEV stream available
    # 3. system is configured for DEV but only has DEV stream available
    # 4. the port being installed has got full releaseline tagging
    # The issue could arise that the user has switched the system from DEV->STABLE or vice-versa so package
    # stream mismatches could arise but in normal case, once a package is installed [that has releaseline tagging]
    # then that specific releaseline will be used
    printVerbose "Finding any releases tagged with ${validatedReleaseLine} and getting the first (newest/latest)"
    releaseMetadata="$(/bin/printf "%s" "${releases}" | jq -e -r '. | map(select(.tag_name | startswith("'${validatedReleaseLine}'")))[0]')"
    printVerbose "Use quick check for asset to check for existence of metadata"
    asset="$(/bin/printf "%s" "${releaseMetadata}" | jq -e -r '.assets[0]')"
    if [ $? -eq 0 ]; then
      # Case 4...
      printVerbose "Found a specific '${validatedReleaseLine}' release-line tagged version; installing..."
    else
      # Case 2 & 3
      printVerbose "No releases on releaseline '${validatedReleaseLine}'; checking alternative releaseline."
      alt=$(echo "${validatedReleaseLine}" | awk ' /DEV/ { print "STABLE" } /STABLE/ { print "DEV" }')
      releaseMetadata="$(/bin/printf "%s" "${releases}" | jq -e -r '. | map(select(.tag_name | startswith("'${alt}'")))[0]')"
      printVerbose "Use quick check for asset to check for existence of metadata"
      asset="$(/bin/printf "%s" "${releaseMetadata}" | jq -e -r '.assets[0]')"
      if [ $? -eq 0 ]; then
        printVerbose "Found a release on the '${alt}' release line so release tagging is active."
        if [ "DEV" = "${validatedReleaseLine}" ]; then
          # The system will be configured to use DEV packages where available but if none, use latest
          printInfo "No specific DEV releaseline package, using latest available"
          releaseMetadata="$(/bin/printf "%s" "${releases}" | jq -e -r ".[0]")"
        else
          printVerbose "The system is configured to only use STABLE releaseline packages but there are none."
          printInfo "No release available on the '${validatedReleaseLine}' releaseline."
        fi
      else
        # Case 1 - old package that has no release tagging yet (no DEV or STABLE), just install latest
        printVerbose "Installing latest release"
        releaseMetadata="$(/bin/printf "%s" "${releases}" | jq -e -r ".[0]")"
      fi
    fi
  fi

  printVerbose "Getting specific asset details from metadata: ${releaseMetadata}"
  if [ -z "${asset}" ] || [ "null" = "${asset}" ]; then
    printVerbose "Asset not found during previous logic; setting now."
    asset=$(/bin/printf "%s" "${releaseMetadata}" | jq -e -r '.assets[0]')
  fi
  if [ -z "${asset}" ]; then
    printError "Unable to determine download asset for ${name}"
  fi

  tagname=$(/bin/printf "%s" "${releaseMetadata}" | jq -e -r ".tag_name" | sed "s/\([^_]*\)_.*/\1/")
  installedReleaseLine=$(validateReleaseLine "${tagname}")

  downloadURL=$(/bin/printf "%s" "${asset}" | jq -e -r '.url')
  metadataJSONURL="$(dirname "${downloadURL}")/metadata.json"
  expanded_size=$(/bin/printf "%s" "${asset}" | jq -e -r '.expanded_size')
  size=$(/bin/printf "%s" "${asset}" | jq -e -r '.size')

  if [ -z "${downloadURL}" ]; then
    printError "Unable to determine download location for ${name}"
  fi
  downloadFile=$(basename "${downloadURL}")
  metadataFile="${downloadFile}.json" # use the same basename as the pax + .json to avoid collision
  downloadFileVer=$(echo "${downloadFile}" | sed -E 's/.*-(.*)\.zos\.pax\.Z/\1/')
  printVerbose "Downloading port from URL: ${downloadURL} to file: ${downloadFile} (ver=${downloadFileVer})"

  if ${downloadOnly}; then
    printVerbose "Skipping installation, downloading only."
  else
    printVerbose "Install=${downloadFileVer};Original=${originalFileVersion};${upgradeInstalled};${installOrUpgrade};${reinstall}"
    if [ "${downloadFileVer}" = "${originalFileVersion}" ]; then
      if ! ${reinstall}; then
        printInfo "${NC}${GREEN}Package ${name} is already installed at the requested version: ${downloadFileVer} and due to the absence of the 'reinstall' flag, will not be reinstalled.${NC}"
        return
      fi
      printInfo "- Reinstalling version '${downloadFileVer}' of ${name}..."
    fi

    printVerbose "Checking if package is not installed but scheduled for upgrade."
    if [ -z "${originalFileVersion}" ]; then
      printVerbose "No previous version found."
      if ${installOrUpgrade}; then
        printVerbose "Package ${name} was not installed, so installing instead of upgrading."
      elif ${upgradeInstalled}; then
        printError "Package ${name} can not be upgraded as it is not installed."
        continue
      fi
      unInstallOldVersion=false
      printInfo "- Installing ${name}..."
    elif ${skipupgrade}; then
      printInfo "Package ${name} has a newer release '${downloadFileVer}' but was not specified for an upgrade."
      continue
    elif ! ${setactive}; then
      printVerbose "Current version '${originalFileVersion}' will remain active."
      unInstallOldVersion=false
    else
      printVerbose "Previous version '${originalFileVersion}' installed."
      if [ -e "${rootInstallDir}/${name}/${name}/.pinned" ]; then
        printWarning "- Version '${originalFileVersion}' has been pinned; upgrade to '${downloadFileVer}' skipped."
        syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_PACKAGE},${CAT_INSTALL}" "DOWNLOAD" "handlePackageInstall" "Attempt to change pinned package '${name}' skipped."
        continue
      else
        printInfo "- Replacing ${name} version '${originalFileVersion}' with '${downloadFileVer}'"
        unInstallOldVersion=true
        currentversiondir=$(cd "${rootInstallDir}/${name}/${name}" && pwd -P)
        currentlinkfile="${currentversiondir}/.links"
      fi
    fi
  fi

  printVerbose "Ensuring we are in the correct working download location '${downloadDir}'"
  cd "${downloadDir}" || exit
  if [ ! -n "${downloadOnly}" ] || [ ! -n "${localInstall}" ]; then
    printVerbose "Checking current directory for already downloaded package [file name comparison]."
    location="current directory"
  else
    printVerbose "Checking cache for already downloaded package [file name comparison]."
    location="zopen package cache"
  fi

  # Download the metadata json file
  if ! runAndLog "curlCmd -L '${metadataJSONURL}' -o '${metadataFile}'" ${redirectToDevNull}; then
    printError "Could not download from ${metadataJSONURL}. Correct any errors and potentially retry."
    continue
  fi
  pax=${downloadFile}
  if [ -f "${pax}" ]; then
    printInfo "- Found existing file '${pax}' in ${location}"
  else
    printInfo "- Downloading ${pax} file from remote to ${location}..."
    if ! ${verbose}; then
      redirectToDevNull="2>/dev/null"
    fi

    # Check partition size before download package spinner starts
    checkAvailableSize "${name}" "${size}"
    progressHandler "network" "- Download complete." &
    ph=$!
    killph="kill -HUP ${ph}"
    addCleanupTrapCmd "${killph}"
        
    if ! runAndLog "curlCmd -L '${downloadURL}' -O ${redirectToDevNull}"; then
      printError "Could not download from ${downloadURL}. Correct any errors and potentially retry."
      continue
    fi
    ${killph} 2> /dev/null # if the timer is not running, the kill will fail
    syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_NETWORK},${CAT_PACKAGE},${CAT_FILE}" "DOWNLOAD" "handlePackageInstall" "Downloaded remote file '${pax}'"
  fi
  if [ ! -f "${pax}" ]; then
    printError "${pax} was not found after download!?"
  fi

  if ${downloadOnly}; then
    printVerbose "Pax was downloaded to local dir '${downloadDir}'"
  elif ${cacheOnly}; then
    printVerbose "Pax was downloaded to zopen cache '${downloadDir}'"
  else
    printVerbose "Installing ${pax}"
    installdirname="${name}/${pax%.pax.Z}" # Use full pax name as default

    printInfo "- Processing ${pax}..."
    baseinstalldir="."
    paxredirect=""
    if ! ${localInstall}; then
      baseinstalldir="${rootInstallDir}"
      paxredirect="-s %[^/]*/%${rootInstallDir}/${installdirname}/%"
      printVerbose "Non-local install, extracting with '${paxredirect}'"
    else
      printInfo "- Local install specified."
      paxredirect="-s %[^/]*/%${installdirname}/%"
      printVerbose "Non-local install, extracting with '${paxredirect}'"
    fi
 
    megabytes=$(echo "scale=2; ${expanded_size} / (1024 * 1024)" | bc)
    printInfo "After this operation, ${NC}${HEADERCOLOR}${BOLD}${megabytes} MB${NC} of additional disk space will be used."
    if ! promptYesOrNo "Do you want to continue?" ${yesToPrompts}; then
      if ! ${force}; then
        mutexFree "zopen"
      fi
      printInfo "Exiting..."
      exit 0
    fi

    printVerbose "Check for existing directory for version '${installdirname}'"
    if [ -d "${baseinstalldir}/${installdirname}" ]; then
      printInfo "- Clearing existing directory and contents"
      rm -rf "${baseinstalldir}/${installdirname}"
    fi

    metadataVersion=$(jq -r '.version_scheme' "${metadataFile}" 2>/dev/null)
    is_greater=$(echo "$metadataVersion > 0.1" | bc -l)

    if [ "$is_greater" -eq 1 ] && ! $skipverify; then
      if ! command -v gpg> /dev/null; then
        skipverify=false;
        printWarning "GPG is not installed"
      else
        verifySignatureOfPax
      fi
    fi
    if ! runLogProgress "pax -rf ${pax} -p p ${paxredirect} ${redirectToDevNull}" "Expanding ${pax}" "Expanded"; then
       printWarning "Errors unpaxing, package directory state unknown."
       printWarning "Use zopen alt to select previous version."
       continue
    fi

    if ${localInstall}; then
      rm -f "${pax}"
    fi

    # Some installation have installation caveats
    installCaveat=$(jq -r '.product.install_caveats // empty' "${metadataFile}" 2>/dev/null)
    if [ -n "$installCaveat" ]; then
      printf "${NC}${HEADERCOLOR}${BOLD}${name}${NC}:\n ${installCaveat}\n" >> ${caveatsFile}
    fi

    
    systemPrereqs=$(jq -r '.product.system_prereqs // empty | map(.name) | join(" ")' "${metadataFile}" 2>/dev/null)
    if ! $bypassPrereqs; then
      if [ -z "${systemPrereqs}" ]; then
        systemPrereqs="${systemPrereqs} zos24" # set the min requirement as z/OS 2.4
      fi
      if [ -n "$systemPrereqs" ]; then
        if [ ! -r "$ZOPEN_SYSTEM_PREREQ_SCRIPT" ]; then
          printError "$ZOPEN_SYSTEM_PREREQ_SCRIPT does not exist. Check file permissions and reinstall the meta package or reinitialize the zopen environment. If the error persists, open an issue."
        else
          . $ZOPEN_SYSTEM_PREREQ_SCRIPT
          for prereq in $(echo "${systemPrereqs}" | xargs | tr ' ' '\n' | sort -u); do
            printInfo "- Checking system pre-req requirement $prereq"
            if command -V "${prereq}" >/dev/null 2>&1; then
              if ! ( ${prereq} ); then
                printError "Failed system pre-req check \"$prereq\". If you wish to bypass this, install with --bypass-prereq-checks"
              fi
            else
              printError "Prereq \"$prereq\" does not exist in $ZOPEN_SYSTEM_PREREQ_SCRIPT. Consider upgrading meta or open an issue if it persists."
            fi
          done
        fi
      fi
    else
      syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_PACKAGE},${CAT_INSTALL}" "BYPASS" "handlePackageInstall" "Bypassing prereq checks ${systemPrereqs} for '${name}'."
    fi
    # Let the individual tools emit their own caveats
    #if [ -d "${baseinstalldir}/${installdirname}/altbin" ]; then
    #  printf "${NC}${HEADERCOLOR}${BOLD}${name}${NC}:\n${name} has tools provided under altbin/ that conflict with tools under /bin.\nTo use them set ZOPEN_TOOLSET_OVERRIDE and then re-source the zopen-config.\n" >> ${caveatsFile}
    #fi


    if ${setactive}; then
      if [ -L "${baseinstalldir}/${name}/${name}" ]; then
        printVerbose "Removing old symlink '${baseinstalldir}/${name}/${name}'"
        rm -f "${baseinstalldir}/${name}/${name}"
      fi
      if ! ln -s "${baseinstalldir}/${installdirname}" "${baseinstalldir}/${name}/${name}"; then
        printError "Could not create symbolic link name."
      fi
    fi

    printVerbose "Adding version '${downloadFileVer}' to info file."
    # Add file version information as a .releaseinfo file
    echo "${downloadFileVer}" > "${baseinstalldir}/${installdirname}/.releaseinfo"

    # Check for a .version file from the pax - if present good, if not
    # generate one from the file name as the tag isn't granular enough to really
    # be used in dependency checks
    if [ ! -f "${baseinstalldir}/${installdirname}/.version" ]; then
      echo "${downloadFileVer}" > "${baseinstalldir}/${installdirname}/.version"
    fi

    printVerbose "Adding releaseline '${installedReleaseLine}' metadata to ${baseinstalldir}/${installdirname}/.releaseline"
    echo "${installedReleaseLine}" > "${baseinstalldir}/${installdirname}/.releaseline"

    if ${setactive}; then
      if ! ${nosymlink}; then
        mergeIntoSystem "${name}" "${baseinstalldir}/${installdirname}" "${ZOPEN_ROOTFS}"
        misrc=$?
        printVerbose "The merge completed with: ${misrc}"
      fi

      printInfo "- Checking for env file."
      if [ -f "${baseinstalldir}/${name}/${name}/.env" ] || [ -f "${baseinstalldir}/${name}/${name}/.appenv" ]; then
        printInfo "- .env file found, adding to profiled processing."
        mkdir -p "${ZOPEN_ROOTFS}/etc/profiled/${name}"
        cat << EOF > "${ZOPEN_ROOTFS}/etc/profiled/${name}/dotenv"
curdir=\$(pwd)
cd "\${ZOPEN_ROOTFS}${ZOPEN_PKGINSTALL##"${ZOPEN_ROOTFS}"}/${name}/${name}" >/dev/null 2>&1
# If .appenv exists, source it as it's quicker
if [ -f ".appenv" ]; then
  . ./.appenv
elif [ -f ".env" ]; then
  . ./.env
fi
cd \${curdir}  >/dev/null 2>&1
EOF
        printInfo "- Sourcing environment to run any setup."
        cd "${baseinstalldir}/${name}/${name}" && ./setup.sh
      fi
    fi
    if ${unInstallOldVersion}; then
      printVerbose "New version merged; checking for orphaned files from previous version."
      # This will remove any old symlinks or dirs that might have changed in an upgrade
      # as the merge process overwrites existing files to point to different version
      unsymlinkFromSystem "${name}" "${ZOPEN_ROOTFS}" "${currentlinkfile}" "${baseinstalldir}/${name}/${name}/.links"
    fi

    if ${setactive}; then
      printVerbose "Marking this version as installed."
      touch "${baseinstalldir}/${name}/${name}/.active"
      installedList="${name} ${installedList}"
      syslog "${ZOPEN_LOG_PATH}/audit.log" "${LOG_A}" "${CAT_INSTALL},${CAT_PACKAGE}" "DOWNLOAD" "handlePackageInstall" "Installed package:'${name}';version:${downloadFileVer};install_dir='${baseinstalldir}/${installdirname}';"
    fi

    registerInstall "$name" "${downloadFileVer}" "${upgradeInstalled}" ${isRuntimeDependency}

    if ${doNotInstallDeps}; then
      printInfo "- Skipping dependency installation."
    elif ${reinstall}; then
      printVerbose "- Reinstalling so no dependency reinstall (unless explicitly listed)."
    else
      printInfo "- Checking for runtime dependencies."
      printVerbose "Checking for .runtimedeps file."
      if [ -e "${baseinstalldir}/${name}/${name}/.runtimedeps" ]; then
        dependencies=$(cat "${baseinstalldir}/${name}/${name}/.runtimedeps")
      fi
      printVerbose "Checking for runtime dependencies from the git metadata."
      if echo "${statusline}" | grep "Runtime Dependencies:" > /dev/null; then
        gitmetadependencies="$(echo "${statusline}" | sed -e "s#.*Runtime Dependencies:<\/b> ##" -e "s#<br />.*##")"
        if [ ! "${gitmetadependencies}" = "No dependencies" ]; then
          dependencies="${dependencies} ${gitmetadependencies}"
        fi
      fi
      dependencies=$(deleteDuplicateEntries "${dependencies}" " ")
      if [ -n "${dependencies}" ]; then
        printInfo "- ${name} depends on: ${dependencies}"
        printInfo "- Installing dependencies."
        installDependencies "${name}" "${dependencies}"
      else
        printInfo "- No runtime dependencies found."
      fi
    fi
    printInfo "${NC}${GREEN}Successfully installed: ${name}${NC}"
  fi # (download only)
}

installPorts()
(
  ports="$1"
  printVerbose "Ports to install: ${ports}"
  if ! ${force}; then
    mutexReq "zopen" "zopen"
  fi
  caveatsFile=$(mktempfile "caveats")
  echo "${ports}" | xargs | tr ' ' '\n' | while read port; do
    handlePackageInstall "${port}"
  done
  if [ -s "${caveatsFile}" ]; then
    printHeader "Installation Caveats"
    cat "${caveatsFile}"
  fi
  rm -f "${caveatsFile}"
  if ! ${force}; then
    mutexFree "zopen"
  fi
)

# Main code start here
args=$*
upgradeInstalled=false
verbose=false
debug=false
selectVersion=false
setActive=true
cacheOnly=false
downloadOnly=false
localInstall=false
reinstall=false
installOrUpgrade=false
nosymlink=false
skipupgrade=false
skipverify=false
doNotInstallDeps=false
all=false
yesToPrompts=false
bypassPrereqs=false
force=false
chosenRepos=""
while [ $# -gt 0 ]; do
  case "$1" in
  "-u" | "--update" | "--upgrade")
    upgradeInstalled=true # Upgrade packages
    ;;
  "-r" | "-reinstall" | "--reinstall")
    reinstall=true # If package already installed, reinstall
    ;;
  "--install-or-upgrade")
    installOrUpgrade=true # Upgrade package or install if not present
    ;;
  "--bypass-prereq-checks")
    bypassPrereqs=true 
    ;;
  "--local-install")
    localInstall=true # Install the package into current directory
    ;;
  "--no-symlink")
    nosymlink=true # Do not mesh the package into the file system; leave as stand-alone
    ;;
  "--no-deps")
    doNotInstallDeps=true
    ;;
  "--cache-only")
    cacheOnly=true # Download remote pax file to cache only (no install)
    ;;
  "--release-line")
    shift
    releaseLine=$(echo "$1" | awk '{print toupper($0)}')
    ;;
  "--yes" | "-y")
    yesToPrompts=true # Automatically answer 'yes' to any questions
    ;;
  "--download-only")
    downloadOnly=true # Download remote pax file to current directory only
    ;;
  "--no-set-active")
    setactive=false # Install package as normal but keep existing installation as active
    ;;
  "--skip-upgrade")
    skipupgrade=true # Do not upgrade any packages
    ;;
  "--skip-verify" | "-sv")
    skipverify=true # Verify signature of packages
    ;;
  "--force")
    force=true # Bypasses locks
    ;;
  "--all")
    all=true # Install all packages
    ;;
  "--select")
    selectVersion=true # Display a selction table to allow version picking
    ;;
  "-h" | "--help" | "-?" )
    printSyntax "${args}"
    exit 0
    ;;
  "--debug")
    verbose=true
    debug=true
    ;;
  "-v" | "--verbose")
    verbose=true
    ;;
  "--version")
    zopen-version ${ME}
    exit 0
    ;;
  *)
    chosenRepos="${chosenRepos} $1"
    ;;
  esac
  shift
done

if [ -z "${chosenRepos}" ]; then
  if ! ${all} && ! ${upgradeInstalled}; then
    printInfo "No ports selected for installation."
    exit 4
  fi
  if ${upgradeInstalled}; then
    printVerbose "No specific port to upgrade, upgrade all installed packages."
    printInfo "- Querying for installed packages."
    progressHandler "spinner" "- Query complete." &
    ph=$!
    killph="kill -HUP ${ph}"
    addCleanupTrapCmd "${killph}"
    chosenRepos="$(${MYDIR}/zopen-query --list --installed --no-header --no-version 2>&1)"
    zqrc=$?
    ${killph} 2> /dev/null # if the timer is not running, the kill will fail
    sleep 1 # give the above process time to clear
    if [ ${zqrc} -ne 0 ]; then
      printError "Query for installed packages unexpectedly failed; zopen-query returned message: '${chosenRepos}'"
    fi
  fi
fi

checkIfConfigLoaded

export SSL_CERT_FILE="${ZOPEN_CA}"
export GIT_SSL_CAINFO="${ZOPEN_CA}"
export CURL_CA_BUNDLE="${ZOPEN_CA}"

if ${downloadOnly}; then
  downloadDir="${PWD}"
  printVerbose "Downloading pax to current directory '${downloadDir}'"
elif ${localInstall}; then
  downloadDir="${PWD}"
  printVerbose "Installing to current directory '${downloadDir}'"
else
  printVerbose "Installing to zopen file system: ${ZOPEN_ROOTFS}"
  if [ -z "${ZOPEN_ROOTFS}" ]; then
    printError "Unable to locate zopen file system, \$ZOPEN_ROOTFS is undefined."
  fi
  downloadDir="${ZOPEN_ROOTFS}/var/cache/zopen"
fi

if [ ! -d "${downloadDir}" ]; then
  mkdir -p "${downloadDir}"
  if [ $? -gt 0 ]; then
    printError "Could not create download directory: ${downloadDir}"
  fi
fi

if [ -n "${downloadDir}" ] && [ -d "${downloadDir}" ]; then
  cd "${downloadDir}" || exit
fi

printVerbose "Working directory: ${downloadDir}"
# Parse passed in repositories and check if valid zopen framework repos
printInfo "- Querying repo for latest package information."
getReposFromGithub
grfgRc=$?
${killph} 2> /dev/null # if the timer is not running, the kill will fail
[ 0 -ne "${grfgRc}" ] && exit "${grfgRc}"

foundPort=false
installArray=""

if ${all}; then
  if ! ${yesToPrompts}; then
    # Sum up the pax size + expanded size of the latest releases of each port
    spaceRequiredBytes=$(jq '.release_data | to_entries | map(select(.value | length > 0)) | map(.value[0].assets[0]) | reduce .[] as $item ({}; . + {($item.name): (($item.size | tonumber)  + ($item.expanded_size | tonumber))}) | [.[]] | add'  ${JSON_CACHE})
    echo "Space: $spaceRequiredBytes"
    spaceRequiredMB=$(echo "scale=0; ${spaceRequiredBytes} / (1024 * 1024)" | bc)
    availableSpaceMB=$(/bin/df -m ${ZOPEN_ROOTFS} | sed "1d" | awk '{ print $3 }' | awk -F'/' '{ print $1 }')

    printInfo "You have chosen to install all tools. An estimated ${spaceRequiredMB} MB of additional disk space will be used."
    if [ $availableSpaceMB -lt $spaceRequiredMB ]; then
      printWarning "Your zopen file-system ($ZOPEN_ROOTFS) only has ${availableSpaceMB} MB of available space."
    fi
    printInfo "Enter 'all' to confirm full installation. (This can take a VERY long time!):"
    confirmall=$(getInput)
    if [ ! "xall" = "x${confirmall}" ]; then
      printError "Cancelling full installation."
    fi
  fi
  for repo in $(echo ${repo_results}); do
    installArray="${installArray} ${repo}"
  done
  installArray=$(strtrim "${installArray}")
else
  chosenRepos=$(strtrim "${chosenRepos}")
  invalidlist=""
  for chosenRepo in $(echo "${chosenRepos}" | tr ',' ' ' | tr -s ' '); do
    printVerbose "Processing repo: ${chosenRepo}"
    printVerbose "Stripping any version (%), tag (#) or port suffixes"
    toolrepo=$(echo "${chosenRepo}" | sed -e 's#%.*##' -e 's#=.*##')
    toolfound=$(echo "${repo_results}" | awk -vtoolrepo="${toolrepo}" '$0 == toolrepo {print}')
    if [ "${toolfound}" = "${toolrepo}" ]; then
      printVerbose "Adding '${chosenRepo}' to the install queue."
      installArray="${installArray} ${chosenRepo}"
      printVerbose "Removing valid port from input list."
      chosenRepos=$(echo "${chosenRepos}" | sed -e "s#^${chosenRepo}\$##")
    else
      invalidlist=$(printf "%s %s" "${invalidlist}" "${chosenRepo}")
    fi
  done
fi

printVerbose "Checking whether any invalid ports were specified."
if [ -n "${invalidlist}" ]; then
  printSoftError "The following requested port(s) do not exist:\n\t$(echo "${invalidlist}" | tr -s '[:space:]')"
  printError "Check port name(s), remove any port suffixes and retry command."
fi

installPorts "${installArray}"
