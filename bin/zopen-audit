#!/bin/sh
#
# Audit utility for zopen community - https://github.com/zopencommunity
#
# All zopen-* scripts MUST start with this code to maintain consistency.
#
setupMyself()
{
  ME=$(basename $0)
  MYDIR="$(cd "$(dirname "$0")" > /dev/null 2>&1 && pwd -P)"
  INCDIR="${MYDIR}/../include"
  if ! [ -d "${INCDIR}" ] && ! [ -f "${INCDIR}/common.sh" ]; then
    echo "Internal Error. Unable to find common.sh file to source." >&2
    exit 8
  fi
  . "${INCDIR}/common.sh"
}
setupMyself

printHelp()
{
  cat << HELPDOC
${ME} is a utility for zopen community to check for vulnerabilities
in your installed packages.

Usage: ${ME} [OPTION]

Options:
  -v, --verbose             run in verbose mode.
  --version                 print version.
  -u, --update, --upgrade   attempt to resolve vulnerabilities by upgrading packages.
  -r, --remove              remove packages with vulnerabilities.

Examples:
  zopen audit       check for vulnerabilities in all installed packages

Report bugs at https://github.com/zopencommunity/meta/issues.

HELPDOC
}

# Main code start here
args=$*
verbose=false
debug=false
upgrade=false
remove=false

while [ $# -gt 0 ]; do
  printVerbose "Parsing option: $1"
  case "$1" in
  "-h" | "--help" | "-?")
    printHelp "${args}"
    exit 0
    ;;
  "--version")
    zopen-version ${ME}
    exit 0
    ;;
  "-v" | "--verbose")
    verbose=true
    ;;
  "-u" | "--update" | "--upgrade")
    upgrade=true
    ;;
  "-r" | "--remove")
    remove=true
    ;;
  "--debug")
    # shellcheck disable=SC2034
    verbose=true
    # shellcheck disable=SC2034
    debug=true
    ;;
  *)
    printError "Invalid option specified."
    ;;
  esac
  shift
done

if [ $upgrade = true ] && [ $remove = true ]; then
  printError "Cannot use both --upgrade and --remove options at once."
  exit 1
fi

updateCaches

if [ ! -f "${JSON_CVE_CACHE}" ]; then
  printError "Vulnerability json cache file not found."
  exit 1
fi
printVerbose "Obtained vulnerability json cache."

if [ $upgrade = true ] && [ ! -f "${JSON_LATEST_CACHE}" ]; then
  printError "Latest releases json cache file not found."
fi
printVerbose "Obtained latest releases json cache."

# Store vulnerability counts
total_vulns=0
low_vulns=0
moderate_vulns=0
high_vulns=0
critical_vulns=0

# Check for CVEs in all installed projects
installed_packages=$(cd "${ZOPEN_PKGINSTALL}" && find ./*/. ! -name . -prune -type l)
printVerbose "Found all installed packages."

# Variables for --upgrade flag
upgradeable_vuln_pkgs=""
num_upgradeable=0
vulns_resolved=0
vulns_added=0

# Variables for --remove flag
removable_vuln_pkgs=""
num_removable=0

printHeader "Scanning for vulnerabilities..."
while IFS= read -r repo; do
  repo="${repo##*/}"
  pkghome="${ZOPEN_PKGINSTALL}/${repo}/${repo}"
  printVerbose "Processing '${repo}'"

  if [ ! -e "${pkghome}/.active" ]; then
    printVerbose "Skipping: Symlink '${repo}' in '${ZOPEN_PKGINSTALL}' is not active"
    continue
  fi

  if [ ! -f "${pkghome}/metadata.json" ]; then
    printVerbose "Skipping: Need the metadata.json to obtain the community's commit sha"
    continue
  fi

  release=$(jq -er '.product.release' "${pkghome}/metadata.json")
  if [ $? -gt 0 ]; then
    printVerbose "No release timestamp in $repo"
    continue
  fi

  # Fetch CVEs using the release timestamp from the vulnerabilities JSON
  cves=$(jq -cr '.["'$repo'"] // {} | .["'$release'"] // {} | .CVEs? // [] | .[] | [.severity, .id, .details] | @tsv' $JSON_CVE_CACHE)

  if [ $? -gt 0 ]; then
    printVerbose "Failed to fetch vulnerabilities for $repo"
    continue
  fi
  if [ -z "$cves" ]; then
    printVerbose "No vulnerabilities found in $repo"
    continue
  fi

  # Add to removable pacakges list
  if $remove; then
    if [ -z "$removable_vuln_pkgs" ]; then
      removable_vuln_pkgs="${repo}"
    else
      removable_vuln_pkgs="${removable_vuln_pkgs}  ${repo}"
    fi
    num_removable=$((num_removable + 1))
  fi

  # If this package is upgradable, add to list of upgradable pkgs with vulns
  latest_release_vulns=""
  is_latest_release=true
  if $upgrade; then
    latest_release=$(jqw -cr '.release_data | .["'$repo'"] | .[0] | .assets | .[0] | .release' $JSON_LATEST_CACHE)

    if [ "$release" != "$latest_release" ]; then
      is_latest_release=false

      # Prevent extra spaces before first package
      if [ -z "$upgradeable_vuln_pkgs" ]; then
        upgradeable_vuln_pkgs="${repo}"
      else
        upgradeable_vuln_pkgs="${upgradeable_vuln_pkgs}  ${repo}"
      fi
      num_upgradeable=$((num_upgradeable + 1))
      latest_release_vulns=$(jq -cr '.["'$repo'"] | .["'$latest_release'"] // {} | .CVEs? // [] | .[] | .id' $JSON_CVE_CACHE)
    fi
  fi
  # Variables for change in vulnerabilities when upgrading to latest version
  pkg_vulns_resolved=0
  pkg_vulns_unresolved=0

  # Iterate through CVEs if any are found
  while IFS="$(echo t | tr t \\t)" read -r severity id details; do
    printHeader "${severity} severity found for $repo:"
    echo "$id"
    echo "$details"

    total_vulns=$((total_vulns + 1))
    case "$severity" in
      "LOW")
        low_vulns=$((low_vulns + 1))
        ;;
      "MEDIUM")
        moderate_vulns=$((moderate_vulns + 1))
        ;;
      "HIGH")
        high_vulns=$((high_vulns + 1))
        ;;
      "CRITICAL")
        critical_vulns=$((critical_vulns + 1))
        ;;
    esac

    if $upgrade; then
      if $is_latest_release; then
        # Skip this section if this is already the latest release
        echo "This is the latest release of this package."
      else
        # Check if this vuln is resolved in the latest release
        resolved=true
        while IFS= read -r latest_id; do
          if [ "$id" = "$latest_id" ]; then
            resolved=false
          fi
        done << LATEST
$(printf "%s\n" "$latest_release_vulns")
LATEST
        if $resolved; then
          pkg_vulns_resolved=$((pkg_vulns_resolved + 1))
          echo "Resolved in the latest release of this package."
        else
          pkg_vulns_unresolved=$((pkg_vulns_unresolved + 1))
        fi
      fi
    fi
    echo ""
  done << CVES
$(printf "%s\n" "$cves")
CVES
  # Add numbers from this package to resolved/added vuln counts
  if [ $upgrade = true ] && [ $is_latest_release = false ]; then
    total_latest_vulns=0
    if [ -n "$latest_release_vulns" ]; then
      total_latest_vulns=$(echo "$latest_release_vulns" | wc -l)
    fi
    vulns_resolved=$((vulns_resolved + pkg_vulns_resolved))
    vulns_added=$((vulns_added + total_latest_vulns - pkg_vulns_unresolved))
  fi
done << EOF
$(printf "%s\n" "$installed_packages")
EOF

# Print summary
printHeader "CVE Summary:"
total_vulns_text="${total_vulns} vulnerabilities"
if [ $total_vulns -eq 1 ]; then
  total_vulns_text="1 vulnerability"
fi
echo "${total_vulns_text} (${low_vulns} low, ${moderate_vulns} moderate, ${high_vulns} high, ${critical_vulns} critical)"

# If upgrade flag is used, present the option to upgrade packages with vulns
if $upgrade; then
  if [ $num_upgradeable -eq 0 ]; then
    printf "\nAll packages with vulnerabilities are already updated to the latest release.\n\n"
  else
    vulns_resolved_text="${vulns_resolved} vulnerabilities"
    vulns_added_text="${vulns_added} vulnerabilities"

    if [ $vulns_resolved -eq 1 ]; then
      vulns_resolved_text="1 vulnerability"
    fi
    if [ $vulns_added -eq 1 ]; then
      vulns_added_text="1 vulnerability"
    fi

    if [ $num_upgradeable -eq 1 ]; then
      printf "\nA newer release is available for 1 package with vulnerabilities.\n"
    else
      printf "\nNewer releases are available for %s packages with vulnerabilities.\n" "$num_upgradeable"
    fi
    printf "Upgrading will resolve %s and add %s.\n" "$vulns_resolved_text" "$vulns_added_text"
    printf "\nPackages: %b\n\n" "$upgradeable_vuln_pkgs"

    if ! promptYesOrNo "Would you like to upgrade these packages?" false; then
      printInfo "Exiting..."
      exit 0
    fi
    zopen-install -u -y ${upgradeable_vuln_pkgs}
  fi
fi

# If remove flag is used, present the option to remove packages with vulns
if $remove; then
  if [ $num_removable -eq 0 ]; then
    printf "\nThere are no packages with vulnerabilities to remove.\n\n"
  else
    if [ $num_removable -eq 1 ]; then
      printf "\nThere is 1 package with vulnerabiities to remove.\n"
    else
      printf "\nThere are %s packages with vulnerabilities to remove.\n" "$num_removable"
    fi
    printf "\nPackages: %b\n\n" "$removable_vuln_pkgs"
    printWarning "Removing these packages may break dependencies of other packages."
    if ! promptYesOrNo "Would you like to remove these pacakges?" false; then
      printInfo "Exiting..."
      exit 0
    fi
    zopen-remove -y ${removable_vuln_pkgs}
  fi
fi
